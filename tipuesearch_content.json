{"pages":[{"title":"about","text":"I enjoy reversing, coding and hacking. Derezzing… If you lose your disc, or fail to follow commands, you will be subject to immediate deresolution. — Sark Inspired by: Material Design library from MaterializeCSS Theme ideas from Tyler Mulligan Project site ideas from Kevin Deldycke Pelican and Docutils work by Mosra Static site generated by Pelican in Python using Jinja2 .","tags":"pages","url":"pages/about.html"},{"title":"reStructuredText Demonstration","text":"1 Examples of Syntax Constructs Author: David Goodger Address: 123 Example Street Example, EX Canada A1B 2C3 Contact: docutils-develop@lists.sourceforge.net Authors: Me; Myself; I organization: humankind date: $Date: 2012-01-03 19:23:53 +0000 (Tue, 03 Jan 2012) $ status: This is a \"work in progress\" revision: $Revision: 7302 $ version: 1 copyright: This document has been placed in the public domain. You may do with it as you wish. You may copy, modify, redistribute, reattribute, sell, buy, rent, lease, destroy, or improve it, quote it at length, excerpt, incorporate, collate, fold, staple, or mutilate it, or do anything else to it that your or anyone else's heart desires. field name: This is a generic bibliographic field. field name 2: Generic bibliographic fields may contain multiple body elements. Like this. Dedication: For Docutils users & co-developers. abstract: This document is a demonstration of the reStructuredText markup language, containing examples of all basic reStructuredText constructs and many advanced constructs. Table of Contents 1 Examples of Syntax Constructs 1.1 Structural Elements 1.1.1 Section Title 1.1.2 Transitions 1.2 Body Elements 1.2.1 Paragraphs 1.2.1.1 Inline Markup 1.2.2 Bullet Lists 1.2.3 Enumerated Lists 1.2.4 Definition Lists 1.2.5 Field Lists 1.2.6 Option Lists 1.2.7 Literal Blocks 1.2.8 Line Blocks 1.2.9 Block Quotes 1.2.10 Doctest Blocks 1.2.11 Tables 1.2.12 Footnotes 1.2.13 Citations 1.2.14 Targets 1.2.14.1 Duplicate Target Names 1.2.14.2 Duplicate Target Names 1.2.15 Directives 1.2.15.1 Document Parts 1.2.15.2 Images 1.2.15.3 Admonitions 1.2.15.4 Topics, Sidebars, and Rubrics 1.2.15.5 Target Footnotes 1.2.15.6 Replacement Text 1.2.15.7 Compound Paragraph 1.2.16 Substitution Definitions 1.2.17 Comments 1.3 Extensions 1.3.1 Code Blocks 1.3.2 Mathematics 1.3.2.1 An Identity of Ramanujan 1.3.2.2 Maxwell's Equations 1.3.3 Doc 1.4 Error Handling 1.1 Structural Elements 1.1.1 Section Title That's it, the text just above this line. 1.1.2 Transitions Here's a transition: It divides the section. 1.2 Body Elements 1.2.1 Paragraphs A paragraph. 1.2.1.1 Inline Markup Paragraphs contain text and may contain inline markup: emphasis , strong emphasis , inline literals , standalone hyperlinks ( http://www.python.org ), external hyperlinks ( Python [5] ), internal cross-references ( example ), external hyperlinks with embedded URIs ( Python web site ), footnote references (manually numbered [1] , anonymous auto-numbered [3] , labeled auto-numbered [2] , or symbolic [*] ), citation references ( [ CIT2002 ] ), substitution references ( ), and inline hyperlink targets (see Targets below for a reference back to here). Character-level inline markup is also possible (although exceedingly ugly!) in re Structured Text . The default role for interpreted text is Title Reference . Here are some explicit interpreted text roles: a PEP reference ( PEP 287 ); an RFC reference ( RFC 2822 ); a subscript ; a superscript ; and explicit roles for standard inline markup . Let's test wrapping and whitespace significance in inline literals: This is an example of --inline-literal --text, --including some-- strangely--hyphenated-words. Adjust-the-width-of-your-browser-window to see how the text is wrapped. -- ---- -------- Now note the spacing between the words of this sentence (words should be grouped in pairs). If the --pep-references option was supplied, there should be a live link to PEP 258 here. 1.2.2 Bullet Lists A bullet list Nested bullet list. Nested item 2. Item 2. Paragraph 2 of item 2. Nested bullet list. Nested item 2. Third level. Item 2. Nested item 3. 1.2.3 Enumerated Lists Arabic numerals. lower alpha) (lower roman) upper alpha. upper roman) Lists that don't start at 1: Three Four C D iii iv List items may also be auto-enumerated. 1.2.4 Definition Lists Term Definition Term : classifier Definition paragraph 1. Definition paragraph 2. Term Definition 1.2.5 Field Lists what: Field lists map field names to field bodies, like database records. They are often part of an extension syntax. They are an unambiguous variant of RFC 2822 fields. how arg1 arg2: The field marker is a colon, the field name, and a colon. The field body may contain one or more body elements, indented relative to the field marker. 1.2.6 Option Lists For listing command-line options: -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input= file long options can also have arguments --very-long-option The description can also start on the next line. The description may contain multiple body elements, regardless of where it starts. -x , -y , -z Multiple options are an \"option group\". -v , --verbose Commonly-seen: short & long options. -1 file , --one= file , --two file Multiple options with arguments. /V DOS / VMS -style options too There must be at least two spaces between the option and the description. 1.2.7 Literal Blocks Literal blocks are indicated with a double-colon (\"::\") at the end of the preceding paragraph (over there --> ). They can be indented: if literal_block: text = 'is left as-is' spaces_and_linebreaks = 'are preserved' markup_processing = None Or they can be quoted without indentation: >> Great idea! > > Why didn't I think of that? 1.2.8 Line Blocks This is a line block. It ends with a blank line. Each new line begins with a vertical bar (\"|\"). Line breaks and initial indents are preserved. Continuation lines are wrapped portions of long lines; they begin with a space in place of the vertical bar. The left edge of a continuation line need not be aligned with the left edge of the text above it. This is a second line block. Blank lines are permitted internally, but they must begin with a \"|\". Take it away, Eric the Orchestra Leader! A one, two, a one two three four Half a bee, philosophically, must, ipso facto , half not be. But half the bee has got to be, vis a vis its entity. D'you see? But can a bee be said to be or not to be an entire bee, when half the bee is not a bee, due to some ancient injury? Singing… 1.2.9 Block Quotes Block quotes consist of indented body elements: My theory by A. Elk. Brackets Miss, brackets. This theory goes as follows and begins now. All brontosauruses are thin at one end, much much thicker in the middle and then thin again at the far end. That is my theory, it is mine, and belongs to me and I own it, and what it is too. —Anne Elk (Miss) 1.2.10 Doctest Blocks >>> print 'Python-specific usage examples; begun with \">>>\"' Python-specific usage examples; begun with \">>>\" >>> print '(cut and pasted from interactive Python sessions)' (cut and pasted from interactive Python sessions) 1.2.11 Tables Here's a grid table followed by a simple table: Header row, column 1 (header rows optional) Header 2 Header 3 Header 4 body row 1, column 1 column 2 column 3 column 4 body row 2 Cells may span columns. body row 3 Cells may span rows. Table cells contain body elements. body row 4 body row 5 Cells may also be empty: --> Inputs Output A B A or B False False False True False True False True True True True True 1.2.12 Footnotes [1] ( 1 , 2 ) A footnote contains body elements, consistently indented by at least 3 spaces. This is the footnote's second paragraph. [2] ( 1 , 2 ) Footnotes may be numbered, either manually (as in [1] ) or automatically using a \"#\"-prefixed label. This footnote has a label so it can be referred to from multiple places, both as a footnote reference ( [2] ) and as a hyperlink reference ( label ). [3] This footnote is numbered automatically and anonymously using a label of \"#\" only. [*] Footnotes may also use symbols, specified with a \"*\" label. Here's a reference to the next footnote: [†] . [†] This footnote shows the next symbol in the sequence. [4] Here's an unreferenced footnote, with a reference to a nonexistent footnote. 1.2.13 Citations [ CIT2002 ] ( 1 , 2 ) Citations are text-labeled footnotes. They may be rendered separately and differently from footnotes. Here's a reference to the above, [ CIT2002 ] , and . 1.2.14 Targets This paragraph is pointed to by the explicit \"example\" target. A reference can be found under Inline Markup , above. Inline hyperlink targets are also possible. Section headers are implicit targets, referred to by name. See Targets , which is a subsection of Body Elements . Explicit external targets are interpolated into references such as \" Python [5] \". Targets may be indirect and anonymous. Thus this phrase may also refer to the Targets section. 1.2.14.1 Duplicate Target Names Duplicate names in section headers or other implicit targets will generate \"info\" (level-1) system messages. Duplicate names in explicit targets will generate \"warning\" (level-2) system messages. 1.2.14.2 Duplicate Target Names 1.2.15 Directives 1.2.15.1 Document Parts 1.2.15.2 Images 1.2.15.3 Admonitions 1.2.15.4 Topics, Sidebars, and Rubrics 1.2.15.5 Target Footnotes 1.2.15.6 Replacement Text 1.2.15.7 Compound Paragraph These are just a sample of the many reStructuredText Directives. For others, please see http://docutils.sourceforge.net/docs/ref/rst/directives.html . 1.2.15.1 Document Parts An example of the \"contents\" directive can be seen above this section (a local, untitled table of contents ) and at the beginning of the document (a document-wide table of contents ). 1.2.15.2 Images An image directive (also clickable — a hyperlink reference): A figure directive: A figure is an image with a caption and/or a legend: re Revised, revisited, based on ‘re' module. Structured Structure-enhanced text, structuredtext. Text Well it is, isn't it? This paragraph is also part of the legend. 1.2.15.3 Admonitions Attention! Directives at large. Caution! Don't take any wooden nickels. ! DANGER ! Mad scientist at work! Error Does not compute. Hint It's bigger than a bread box. Important Wash behind your ears. Clean up your room. Call your mother. Back up your data. Note This is a note. Tip 15% if the service is good. Warning Strong prose may provoke extreme mental exertion. Reader discretion is strongly advised. And, by the way… You can make up your own admonition too. 1.2.15.4 Topics, Sidebars, and Rubrics Sidebar Title Optional Subtitle This is a sidebar. It is for text outside the flow of the main text. This is a rubric inside a sidebar Sidebars often appears beside the main text with a border and background color. Topic Title This is a topic. This is a rubric 1.2.15.5 Target Footnotes [5] ( 1 , 2 , 3 ) http://www.python.org/ 1.2.15.6 Replacement Text I recommend you try Python, the best language around [5] . 1.2.15.7 Compound Paragraph This paragraph contains a literal block: Connecting... OK Transmitting data... OK Disconnecting... OK and thus consists of a simple paragraph, a literal block, and another simple paragraph. Nonetheless it is semantically one paragraph. This construct is called a compound paragraph and can be produced with the \"compound\" directive. 1.2.16 Substitution Definitions An inline image ( ) example: (Substitution definitions are not visible in the HTML source.) 1.2.17 Comments Here's one: (View the HTML source to see the comment.) 1.3 Extensions 1.3.1 Code Blocks Here's a neat implementation of the Sieve of Eratosthenes. 1 2 3 4 5 6 7 8 9 def sieve_of_eratosthenes (): factors = defaultdict ( set ) for n in count ( 2 ): if factors [ n ]: for m in factors . pop ( n ): factors [ n + m ] . add ( m ) else : factors [ n * n ] . add ( n ) yield n 1.3.2 Mathematics Here are some remarkable equations While displaying equations look good for a page of samples, the ability to mix math and text in a paragraph is also important. This expression √ ( 3 x − 1 ) + (1 + x ) 2 is an example of an inline equation. As you see, MathJax equations can be used this way as well, without unduly disturbing the spacing between lines. 1.3.2.1 An Identity of Ramanujan ( 1 )/( ( √ ( φ √ ( 5 ) ) − φ ) e ( 25 )/( π ) ) = 1 + ( e − 2 π )/( 1 + ( e − 4 π )/( 1 + ( e − 6 π )/( 1 + ( e − 8 π )/( 1 + … ) ) ) ) 1.3.2.2 Maxwell's Equations ∇ × B ⃗ − ( 1 )/( c ) ( ∂ E ⃗ )/( ∂ t ) = ( 4 π )/( c ) j ⃗ ∇⋅ E ⃗ = 4 π ρ ∇ × E ⃗ + ( 1 )/( c ) ( ∂ B ⃗ )/( ∂ t ) = 0 ⃗ ∇⋅ B ⃗ = 0 1.3.3 Doc 1.4 Error Handling Any errors caught during processing will generate system messages.","tags":"pages","url":"pages/restructured-text-demo.html"},{"title":"Restructured Text Syntax Reminders","text":"Note If you are reading this as HTML , please read cheatsheet.txt instead to see the input syntax examples! Section Structure Section titles are underlined or overlined & underlined. Body Elements Grid table: Paragraphs are flush-left, separated by blank lines. Block quotes are indented. Literal block, preceded by \"::\": Indented or: > Quoted >>> print 'Doctest block' Doctest block Line blocks preserve line breaks & indents. [new in 0.3.6] Useful for addresses, verse, and adornment-free lists; long lines can be wrapped with continuation lines. Simple tables: List Type Examples (syntax in the text source ) Bullet list items begin with \"-\", \"+\", or \"*\" Enumerated list items use any variation of \"1.\", \"A)\", and \"(i)\" also auto-enumerated Definition list Term is flush-left : optional classifier Definition is indented, no blank line between Field list field name: field body Option list -o at least 2 spaces between option & description Explicit Markup Examples (visible in the text source ) Footnote [1] Manually numbered or [#] auto-numbered (even [#labelled]) or [*] auto-symbol Citation [ CIT2002 ] A citation. Hyperlink Target Anonymous Target Directive (\"::\") Substitution Def Comment Empty Comment (\"..\" on a line by itself, with blank lines before & after, used to separate indentation contexts) Inline Markup emphasis ; strong emphasis ; interpreted text ; interpreted text with role ; inline literal text ; standalone hyperlink, http://docutils.sourceforge.net ; named reference, reStructuredText ; anonymous reference ; footnote reference, [1] ; citation reference, [ CIT2002 ] ; like an inline directive; inline internal target . Directive Quick Reference See < http://docutils.sf.net/docs/ref/rst/directives.html > for full info. Directive Name Description (Docutils version added to, in [brackets]) attention Specific admonition; also \"caution\", \"danger\", \"error\", \"hint\", \"important\", \"note\", \"tip\", \"warning\" admonition Generic titled admonition: .. admonition:: By The Way image .. image:: picture.png ; many options possible figure Like \"image\", but with optional caption and legend topic .. topic:: Title ; like a mini section sidebar .. sidebar:: Title ; like a mini parallel document parsed-literal A literal block with parsed inline markup rubric .. rubric:: Informal Heading epigraph Block quote with class=\"epigraph\" highlights Block quote with class=\"highlights\" pull-quote Block quote with class=\"pull-quote\" compound Compound paragraphs [0.3.6] container Generic block-level container element [0.3.10] table Create a titled table [0.3.1] list-table Create a table from a uniform two-level bullet list [0.3.8] csv-table Create a table from CSV data [0.3.4] contents Generate a table of contents sectnum Automatically number sections, subsections, etc. header, footer Create document decorations [0.3.8] target-notes Create an explicit footnote for each external target math Mathematical notation (input in LaTeX format) meta HTML -specific metadata include Read an external reST file as if it were inline raw Non-reST data passed untouched to the Writer replace Replacement text for substitution definitions unicode Unicode character code conversion for substitution defs date Generates today's date; for substitution defs class Set a \"class\" attribute on the next element role Create a custom interpreted text role [0.3.2] default-role Set the default interpreted text role [0.3.10] title Set the metadata document title [0.3.10] Interpreted Text Role Quick Reference See < http://docutils.sf.net/docs/ref/rst/roles.html > for full info. Role Name Description emphasis Equivalent to emphasis literal Equivalent to literal but processes backslash escapes math Mathematical notation (input in LaTeX format) PEP Reference to a numbered Python Enhancement Proposal RFC Reference to a numbered Internet Request For Comments raw For non-reST data; cannot be used directly (see docs) [0.3.6] strong Equivalent to strong sub Subscript sup Superscript title Title reference (book, etc.); standard default role","tags":"pages","url":"pages/restructured-text-syntax.html"},{"title":"Restructured Text Reference Sheet","text":"Inline Markup Inline markup allows words and phrases within text to have character styles (like italics and boldface) and functionality (like hyperlinks). *emphasis* emphasis **strong emphasis** strong emphasis `interpreted text` The rendering and meaning of interpreted text is domain- or application-dependent. ``inline literal`` inline literal reference_ reference `phrase reference`_ phrase reference anonymous__ anonymous _`inline internal target` inline internal target |substitution reference| The result is substituted in from the substitution definition. footnote reference [1]_ footnote reference [1] citation reference [CIT2002]_ citation reference [ CIT2002 ] http://docutils.sf.net/ http://docutils.sf.net/ Escaping with Backslashes reStructuredText uses backslashes (\"\\\") to override the special meaning given to markup characters and get the literal characters themselves. To get a literal backslash, use an escaped backslash (\"\\\"). For example: *escape* ``with`` \"\\\" escape with \"\" \\*escape* \\``with`` \"\\\\\" *escape* \"with\" \"\\\" Lists - This is item 1. A blank line before the first and last items is required. - This is item 2 - Item 3: blank lines between items are optional. - Item 4: Bullets are \"-\", \"*\" or \"+\". Continuing text must be aligned after the bullet and whitespace. This is item 1. A blank line before the first and last items is required. This is item 2 Item 3: blank lines between items are optional. Item 4: Bullets are \"-\", \"*\" or \"+\". Continuing text must be aligned after the bullet and whitespace. 3. This is the first item 4. This is the second item 5. Enumerators are arabic numbers, single letters, or roman numerals 6. List items should be sequentially numbered, but need not start at 1 (although not all formatters will honour the first index). #. This item is auto-enumerated This is the first item This is the second item Enumerators are arabic numbers, single letters, or roman numerals List items should be sequentially numbered, but need not start at 1 (although not all formatters will honour the first index). This item is auto-enumerated what Definition lists associate a term with a definition. how The term is a one-line phrase, and the definition is one or more paragraphs or body elements, indented relative to the term. Blank lines are not allowed between term and definition. what Definition lists associate a term with a definition. how The term is a one-line phrase, and the definition is one or more paragraphs or body elements, indented relative to the term. Blank lines are not allowed between term and definition. :Authors: Tony J. (Tibs) Ibbs, David Goodger (and sundry other good-natured folks) :Version: 1.0 of 2001/08/08 :Dedication: To my father. Authors: Tony J. (Tibs) Ibbs, David Goodger (and sundry other good-natured folks) Version: 1.0 of 2001/08/08 Dedication: To my father. -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input=file long options can also have arguments /V DOS/VMS-style options too -a command-line option \"a\" -b file options can have arguments and long descriptions --long options can be long also --input= file long options can also have arguments /V DOS / VMS -style options too Section Structure Title ===== Titles are underlined (or over- and underlined) with a nonalphanumeric character at least as long as the text. A lone top-level section is lifted up to be the document's title. Any non-alphanumeric character can be used, but Python convention is: * ``#`` with overline, for parts * ``*`` with overline, for chapters * ``=``, for sections * ``-``, for subsections * ``&#94;``, for subsubsections * ``\"``, for paragraphs Title Titles are underlined (or over- and underlined) with a nonalphanumeric character at least as long as the text. A lone top-level section is lifted up to be the document's title. Any non-alphanumeric character can be used, but Python convention is: # with overline, for parts * with overline, for chapters = , for sections - , for subsections &#94; , for subsubsections \" , for paragraphs Blocks This is a paragraph. Paragraphs line up at their left edges, and are normally separated by blank lines. This is a paragraph. Paragraphs line up at their left edges, and are normally separated by blank lines. A paragraph containing only two colons indicates the following indented or quoted text is a literal block or quoted text is a literal block. :: Whitespace, newlines, blank lines, and all kinds of markup (like *this* or \\this) is preserved here. You can also tack the ``::`` at the end of a paragraph:: It's very convenient to use this form. Per-line quoting can also be used for unindented blocks:: > Useful for quotes from email and > for Haskell literate programming. A paragraph containing only two colons indicates that the following indented or quoted text is a literal block. Whitespace, newlines, blank lines, and all kinds of markup (like *this* or \\this) is preserved by literal blocks. You can also tack the :: at the end of a paragraph: It's very convenient to use this form. Per-line quoting can also be used for unindented blocks: > Useful for quotes from email and > for Haskell literate programming. | Line blocks are useful for addresses, | verse, and adornment-free lists. | | Each new line begins with a | vertical bar (\"|\"). | Line breaks and initial indents | are preserved. | Continuation lines are wrapped portions of long lines; they begin with spaces in place of vertical bars. Line blocks are useful for addresses, verse, and adornment-free lists. Each new line begins with a vertical bar (\"|\"). Line breaks and initial indents are preserved. Continuation lines are wrapped portions of long lines; they begin with spaces in place of vertical bars. Block quotes are just: Indented paragraphs, and they may nest. Block quotes are just: Indented paragraphs, and they may nest. Doctest blocks are interactive Python sessions. They begin with \"``>>>``\" and end with a blank line. >>> print \"This is a doctest block.\" This is a doctest block. Doctest blocks are interactive Python sessions. They begin with \" >>> \" and end with a blank line. >>> print \"This is a doctest block.\" This is a doctest block. A transition marker is a horizontal line of 4 or more repeated punctuation characters. ------------ A transition should not begin or end a section or document, nor should two transitions be immediately adjacent. A transition marker is a horizontal line of 4 or more repeated punctuation characters. A transition should not begin or end a section or document, nor should two transitions be immediately adjacent. Tables There are two syntaxes for tables in reStructuredText. Grid tables are complete but cumbersome to create. Simple tables are easy to create but limited (no row spans, etc.). +------------+------------+-----------+ | Header 1 | Header 2 | Header 3 | +============+============+===========+ | body row 1 | column 2 | column 3 | +------------+------------+-----------+ | body row 2 | Cells may span columns.| +------------+------------+-----------+ | body row 3 | Cells may | - Cells | +------------+ span rows. | - contain | | body row 4 | | - blocks. | +------------+------------+-----------+ Header 1 Header 2 Header 3 body row 1 column 2 column 3 body row 2 Cells may span columns. body row 3 Cells may span rows. Cells contain blocks. body row 4 ===== ===== ====== Inputs Output ------------ ------ A B A or B ===== ===== ====== False False False True False True False True True True True True ===== ===== ====== Inputs Output A B A or B False False False True False True False True True True True True Explicit Markup Explicit markup blocks are used for constructs which float (footnotes), have no direct paper-document representation (hyperlink targets, comments), or require specialized processing (directives). They all begin with two periods and whitespace, the \"explicit markup start\". Footnote references, like [5]_. Note that footnotes may get rearranged, e.g., to the bottom of the \"page\". .. [5] A numerical footnote. Note there's no colon after the ``]``. Footnote references, like [5] . Note that footnotes may get rearranged, e.g., to the bottom of the \"page\". [5] A numerical footnote. Note there's no colon after the ] . Autonumbered footnotes are possible, like using [#]_ and [#]_. .. [#] This is the first one. .. [#] This is the second one. They may be assigned 'autonumber labels' - for instance, [#fourth]_ and [#third]_. .. [#third] a.k.a. third_ .. [#fourth] a.k.a. fourth_ Autonumbered footnotes are possible, like using [1] and [2] . [1] This is the first one. [2] This is the second one. They may be assigned ‘autonumber labels' - for instance, [4] and [3] . [3] a.k.a. third [4] a.k.a. fourth Auto-symbol footnotes are also possible, like this: [*]_ and [*]_. .. [*] This is the first one. .. [*] This is the second one. Auto-symbol footnotes are also possible, like this: [*] and [†] . [*] This is the first one. [†] This is the second one. Citation references, like [CIT2002]_. Note that citations may get rearranged, e.g., to the bottom of the \"page\". .. [CIT2002] A citation (as often used in journals). Citation labels contain alphanumerics, underlines, hyphens and fullstops. Case is not significant. Given a citation like [this]_, one can also refer to it like this_. .. [this] here. Citation references, like [ CIT2002 ] . Note that citations may get rearranged, e.g., to the bottom of the \"page\". [ CIT2002 ] ( 1 , 2 ) A citation (as often used in journals). Citation labels contain alphanumerics, underlines, hyphens and fullstops. Case is not significant. Given a citation like [this] , one can also refer to it like this . [this] here. External hyperlinks, like Python_. .. _Python: http://www.python.org/ External hyperlinks, like Python . External hyperlinks, like `Python <http://www.python.org/>`_. External hyperlinks, like Python . Internal crossreferences, like example_. .. _example: This is an example crossreference target. Internal crossreferences, like example . This is an example crossreference target. Python_ is `my favourite programming language`__. .. _Python: http://www.python.org/ __ Python_ Python is my favourite programming language . Titles are targets, too ======================= Implict references, like `Titles are targets, too`_. Titles are targets, too Implict references, like Titles are targets, too . Directives are a general-purpose extension mechanism, a way of adding support for new constructs without adding new syntax. For a description of all standard directives, see reStructuredText Directives ( http://is.gd/2Ecqh ). For instance: .. image:: {filename}/images/hex.gif :width: 40pt :alt: img For instance: Substitutions are like inline directives, allowing graphics and arbitrary constructs within text. The |biohazard| symbol must be used on containers used to dispose of medical waste. .. |biohazard| image:: {filename}/images/biohazard.png :align: middle :width: 48 The symbol must be used on containers used to dispose of medical waste. Any text which begins with an explicit markup start but doesn't use the syntax of any of the constructs above, is a comment. .. This text will not be shown (but, for instance, in HTML might be rendered as an HTML comment) An \"empty comment\" does not consume following blocks. (An empty comment is \"..\" with blank lines before and after.) .. So this block is not \"lost\", despite its indentation. An \"empty comment\" does not consume following blocks. (An empty comment is \"..\" with blank lines before and after.) So this block is not \"lost\", despite its indentation. Credits CP Font from LiquiType: http://www.liquitype.com/workshop/type_design/cp-mono Magnetic Balls V2 image by fdecomite: http://www.flickr.com/photos/fdecomite/2926556794/ Sponsored by Net Managers http://www.netmanagers.com.ar Typeset using rst2pdf http://rst2pdf.googlecode.com","tags":"pages","url":"pages/rst-cheatsheet.html"},{"title":"working","text":"Site is still being worked on. Static site generated by Pelican in Python using Jinja2 .","tags":"pages","url":"pages/working.html"},{"title":"Project Site Link","text":"Moving content to this site is taking longer than expected.. Feel free to track my progress using the Atom feeds in your favorite reader.. All Atom Feeds All Atom Posts","tags":"project site","url":"2018/working.html"},{"title":"PlantUML test page","text":"Examples of some of the files able to be generated using the Pelican plantuml plugin. Due to the customizable skinparam sequence we are able to design it to fit any site. Will break this down more and also look into building in CSS style sheets to handle achieve a consistant look. Sequence diagram from PlantUML . 1 .. uml :: 2 :alt: Sample sequence diagram 3 4 skinparam backgroundColor Black 5 6 participant User 7 8 User -> A: DoWork 9 activate A #FFBBBB 10 11 A -> A: Internal call 12 activate A #DarkSalmon 13 14 A -> B: << createRequest >> 15 activate B 16 17 B --> A: RequestCreated 18 deactivate B 19 deactivate A 20 A -> User: Done 21 deactivate A Another example from PlantUML site (activity diagram): 1 .. uml :: 2 3 skinparam monochrome reverse 4 5 start 6 :ClickServlet.handleRequest(); 7 :new page; 8 if (Page.onSecurityCheck) then (true) 9 :Page.onInit(); 10 if (isForward?) then (no) 11 :Process controls; 12 if (continue processing?) then (no) 13 stop 14 endif 15 16 if (isPost?) then (yes) 17 :Page.onPost(); 18 else (no) 19 :Page.onGet(); 20 endif 21 :Page.onRender(); 22 endif 23 else (false) 24 endif 25 26 if (do redirect?) then (yes) 27 :redirect process; 28 else 29 if (do forward?) then (yes) 30 :Forward request; 31 else (no) 32 :Render page template; 33 endif 34 endif 35 36 stop Using skinparam to customize the graphics 1 .. uml :: 2 3 skinparam backgroundColor Black 4 skinparam handwritten true 5 6 skinparam sequence { 7 ArrowColor DeepSkyBlue 8 ActorBorderColor DeepSkyBlue 9 LifeLineBorderColor blue 10 LifeLineBackgroundColor #A9DCDF 11 12 ParticipantBorderColor DeepSkyBlue 13 ParticipantBackgroundColor DodgerBlue 14 ParticipantFontName Impact 15 ParticipantFontSize 17 16 ParticipantFontColor #A9DCDF 17 18 ActorBackgroundColor aqua 19 ActorFontColor DeepSkyBlue 20 ActorFontSize 17 21 ActorFontName Aapex 22 } 23 24 actor User 25 participant \"First Class\" as A 26 participant \"Second Class\" as B 27 participant \"Last Class\" as C 28 29 User -> A: DoWork 30 activate A 31 32 A -> B: Create Request 33 activate B 34 35 B -> C: DoWork 36 activate C 37 C --> B: WorkDone 38 destroy C 39 40 B --> A: Request Created 41 deactivate B 42 43 A --> User: Done 44 deactivate A","tags":"project site","url":"2018/plantuml.html"},{"title":"How to install Pelican","text":"Installation 1) First, create a virtualenv . This step requires that you have already setup virtualenv and virtualenvwrapper. I am using it to create the virtualenv with python3 and probably isn't the correct way today. I have been using python3 for years and I like having the same workflow for both. 1 $ mkproject -p python3 <venv_name> Install Pelican 1 $ pip install pelican 3) Run quickstart to get a sample site created to look at. It will ask a series of questions to configure environment. Use default settings unless you know what you want. All settings are able to modified later in the pelicanconf.py. 1 $ pelican-quickstart To look at the test site and explore. 1 $ make html && make serve Goto a web browser to http://127.0.0.1:8000 6) Generate content by going into the <project folder/content and create a new RestructuredText file. Once done you can regenerate content and review at the same localhost address. 1 $ make clean && make html && make serve","tags":"project site","url":"2018/pelican-powered.html"},{"title":"Golang prototyping workflow","text":"direnv.sh 1 # Setup direnv if file exists and not root 2 DIRENV = ` which direnv ` 3 4 if [ -f $DIRENV ] ; then 5 if [[ $EUID -ne 0 ]] ; then 6 eval $( $DIRENV hook bash ) 7 fi 8 fi mkgoproject.sh 1 #!/bin/bash 2 # use direnv to create new gocode instance 3 # sets up git, dep, project repo and verifies test file compiles and executes 4 #set -x 5 6 #TODO: add in gitignore 7 8 REPOPATH = \"github.com/derez\" 9 10 DIRENV = $( which direnv ) 11 GO = $( which go ) 12 DEP = $( which dep ) 13 GIT = $( which git ) 14 15 for FC in $DIRENV $GO $DEP $GIT ; do 16 if [ ! -f $FC ] ; then 17 echo \"[!] Requires $FC to be installed!\" 18 exit 1 19 fi 20 done 21 22 [ $# -eq 0 ] && { echo \"Usage: $0 project_path_name\" ; exit 1 ; } 23 24 PROJECT = \" $1 \" 25 26 PROJECT_PATH = \" $HOME / $PROJECT \" 27 28 if [ -d \" $PROJECT_PATH \" ] ; then 29 { echo \"[!] $PROJECT_PATH already exists\" ; exit 1 ; } 30 fi 31 32 echo \"[*] Create new project folder at $PROJECT_PATH \" 33 mkdir \" $PROJECT_PATH \" 34 35 ENVRC = \" $PROJECT_PATH /.envrc\" 36 echo \"[*] Create .envrc file for environment variables at $ENVRC \" 37 38 echo \"export GOPATH= $PROJECT_PATH \" >> $ENVRC 39 echo \"export PATH= $PROJECT_PATH /bin: $PATH \" >> $ENVRC 40 41 echo \"[*] Create project structure\" 42 mkdir \" $PROJECT_PATH /bin\" 43 mkdir \" $PROJECT_PATH /pkg\" 44 mkdir \" $PROJECT_PATH /src\" 45 46 cd $PROJECT_PATH 47 $DIRENV allow . && eval $( direnv export bash ) 48 $DIRENV status 49 50 PROJECT_REPO = \" $PROJECT_PATH /src/ $REPOPATH / $PROJECT \" 51 echo \"[*] Setup project repo at $PROJECT_REPO \" 52 53 mkdir -p \" $PROJECT_REPO \" 54 cd \"src/ $REPOPATH / $PROJECT \" 55 56 echo \"[*] Initialize new git repo for $PROJECT_REPO \" 57 $GIT init 58 echo \"[*] Initialize dep for $PROJECT_REPO \" 59 $DEP init 60 61 TESTFILE = \" $PROJECT_REPO / $PROJECT .go\" 62 echo \"[*] Create test file at $TESTFILE \" 63 64 $( which cat ) > \" $TESTFILE \" << EOF 65 66 package main 67 68 import \"fmt\" 69 70 func main() { 71 fmt.Println(\"\\nNew test file compiled and executed successfully\\n\") 72 } 73 EOF 74 75 $GO run $TESTFILE 76 77 echo \"Project Path: $PROJECT_PATH \" 78 echo \"Project Repo: $PROJECT_REPO \"","tags":"workflow","url":"2018/golang-prototyping-workflow.html"},{"title":"Python prototyping workflow","text":"Cover virtualenv, virtualenvwrappers for Python2 and venv for Python3 pyenv.sh - placed in /etc/profile.d 1 #!/bin/bash 2 3 # Sets up virtualenvwrapper as part of /etc/profile.d 4 # sets PROJECT_HOME directory to ~/pyenv 5 # WORKON_HOME directory defaults at ~/.virtualenv 6 7 8 # Python environment startup 9 # Ignore if opening shell as root 10 if [[ $EUID -gt 999 ]] ; then 11 12 if [ -f $HOME /.pythonrc.py ] ; then 13 export PYTHONSTARTUP = $HOME /.pythonrc.py 14 fi 15 16 if ! [ -d \" $HOME /pyenv\" ] ; then 17 mkdir -p $HOME /pyenv 18 fi 19 20 # Python virtualenv 21 export VIRTUALENVWRAPPER_PYTHON = /usr/bin/python 22 23 export PROJECT_HOME = $HOME /pyenv 24 # turns off changing into WORKON_HOME 25 # Sets up chainging into PROJECT_HOME when activating 26 grep -q -F \"cdproject\" $WORKON_HOME /postactivate || echo \"cdproject\" >> $WORKON_HOME /postactivate 27 28 export VIRTUALENVWRAPPER_WORKON_CD = 0 29 source virtualenvwrapper.sh > /dev/null 2 > & 1 30 31 fi","tags":"workflow","url":"2018/python-prototyping-workflow.html"},{"title":"fedora workstation and ansible","text":"Introducing my ansible code for managing my home workstations. 1 ansible - playbook my new workstation","tags":"devops","url":"2018/workstation and ansible.html"},{"title":"Pelican project website and theme","text":"Background I have been thinking about getting my project blog site back up again. I wanted to use a static website generator as security has been an issue with closing the last two down. Since I have spent the better part of the last 14 years working in Python that was an easy choice as well. I chose Pelican and decided to build a custom theme as I couldn't find one I was happy with. Requirements Since all projects starts with requirements ;) Support identification of projects and resources I want to post. Would like to have a project site first with the ability to blog. Wanted to use ReStructured Text. The site content needed to be driven by simple ASCII text files. Great code syntax highlighting is a must. Support for mobile platforms.","tags":"project site","url":"2018/project-website.html"}]}